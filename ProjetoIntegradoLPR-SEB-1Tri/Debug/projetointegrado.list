
projetointegrado.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002af8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000a91c  08002c04  08002c04  00012c04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d520  0800d520  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  0800d520  0800d520  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d520  0800d520  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d520  0800d520  0001d520  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d524  0800d524  0001d524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  0800d528  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  20000024  0800d54c  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000009c  0800d54c  0002009c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   000060f3  00000000  00000000  0002004d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000013ad  00000000  00000000  00026140  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006b8  00000000  00000000  000274f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  00016171  00000000  00000000  00027ba8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00005ed6  00000000  00000000  0003dd19  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0007e186  00000000  00000000  00043bef  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  000c1d75  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 000005e0  00000000  00000000  000c1df0  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame  00001958  00000000  00000000  000c23d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000024 	.word	0x20000024
 8000128:	00000000 	.word	0x00000000
 800012c:	08002bec 	.word	0x08002bec

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000028 	.word	0x20000028
 8000148:	08002bec 	.word	0x08002bec

0800014c <ST7789_WriteCommand>:
 * @brief Write command to ST7789 controller
 * @param cmd -> command to write
 * @return none
 */
static void ST7789_WriteCommand(uint8_t cmd)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 8000156:	2200      	movs	r2, #0
 8000158:	2110      	movs	r1, #16
 800015a:	480c      	ldr	r0, [pc, #48]	; (800018c <ST7789_WriteCommand+0x40>)
 800015c:	f001 feb1 	bl	8001ec2 <HAL_GPIO_WritePin>
	ST7789_DC_Clr();
 8000160:	2200      	movs	r2, #0
 8000162:	2101      	movs	r1, #1
 8000164:	480a      	ldr	r0, [pc, #40]	; (8000190 <ST7789_WriteCommand+0x44>)
 8000166:	f001 feac 	bl	8001ec2 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 800016a:	1df9      	adds	r1, r7, #7
 800016c:	f04f 33ff 	mov.w	r3, #4294967295
 8000170:	2201      	movs	r2, #1
 8000172:	4808      	ldr	r0, [pc, #32]	; (8000194 <ST7789_WriteCommand+0x48>)
 8000174:	f002 fb2c 	bl	80027d0 <HAL_SPI_Transmit>
	ST7789_UnSelect();
 8000178:	2201      	movs	r2, #1
 800017a:	2110      	movs	r1, #16
 800017c:	4803      	ldr	r0, [pc, #12]	; (800018c <ST7789_WriteCommand+0x40>)
 800017e:	f001 fea0 	bl	8001ec2 <HAL_GPIO_WritePin>
}
 8000182:	bf00      	nop
 8000184:	3708      	adds	r7, #8
 8000186:	46bd      	mov	sp, r7
 8000188:	bd80      	pop	{r7, pc}
 800018a:	bf00      	nop
 800018c:	40010800 	.word	0x40010800
 8000190:	40010c00 	.word	0x40010c00
 8000194:	20000040 	.word	0x20000040

08000198 <ST7789_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void ST7789_WriteData(uint8_t *buff, size_t buff_size)
{
 8000198:	b580      	push	{r7, lr}
 800019a:	b084      	sub	sp, #16
 800019c:	af00      	add	r7, sp, #0
 800019e:	6078      	str	r0, [r7, #4]
 80001a0:	6039      	str	r1, [r7, #0]
	ST7789_Select();
 80001a2:	2200      	movs	r2, #0
 80001a4:	2110      	movs	r1, #16
 80001a6:	4815      	ldr	r0, [pc, #84]	; (80001fc <ST7789_WriteData+0x64>)
 80001a8:	f001 fe8b 	bl	8001ec2 <HAL_GPIO_WritePin>
	ST7789_DC_Set();
 80001ac:	2201      	movs	r2, #1
 80001ae:	2101      	movs	r1, #1
 80001b0:	4813      	ldr	r0, [pc, #76]	; (8000200 <ST7789_WriteData+0x68>)
 80001b2:	f001 fe86 	bl	8001ec2 <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once

	while (buff_size > 0) {
 80001b6:	e015      	b.n	80001e4 <ST7789_WriteData+0x4c>
		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 80001b8:	683b      	ldr	r3, [r7, #0]
 80001ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80001be:	4293      	cmp	r3, r2
 80001c0:	bf28      	it	cs
 80001c2:	4613      	movcs	r3, r2
 80001c4:	81fb      	strh	r3, [r7, #14]
				{}
			}
			else
				HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
		#else
			HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 80001c6:	89fa      	ldrh	r2, [r7, #14]
 80001c8:	f04f 33ff 	mov.w	r3, #4294967295
 80001cc:	6879      	ldr	r1, [r7, #4]
 80001ce:	480d      	ldr	r0, [pc, #52]	; (8000204 <ST7789_WriteData+0x6c>)
 80001d0:	f002 fafe 	bl	80027d0 <HAL_SPI_Transmit>
		#endif
		buff += chunk_size;
 80001d4:	89fb      	ldrh	r3, [r7, #14]
 80001d6:	687a      	ldr	r2, [r7, #4]
 80001d8:	4413      	add	r3, r2
 80001da:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 80001dc:	89fb      	ldrh	r3, [r7, #14]
 80001de:	683a      	ldr	r2, [r7, #0]
 80001e0:	1ad3      	subs	r3, r2, r3
 80001e2:	603b      	str	r3, [r7, #0]
	while (buff_size > 0) {
 80001e4:	683b      	ldr	r3, [r7, #0]
 80001e6:	2b00      	cmp	r3, #0
 80001e8:	d1e6      	bne.n	80001b8 <ST7789_WriteData+0x20>
	}

	ST7789_UnSelect();
 80001ea:	2201      	movs	r2, #1
 80001ec:	2110      	movs	r1, #16
 80001ee:	4803      	ldr	r0, [pc, #12]	; (80001fc <ST7789_WriteData+0x64>)
 80001f0:	f001 fe67 	bl	8001ec2 <HAL_GPIO_WritePin>
}
 80001f4:	bf00      	nop
 80001f6:	3710      	adds	r7, #16
 80001f8:	46bd      	mov	sp, r7
 80001fa:	bd80      	pop	{r7, pc}
 80001fc:	40010800 	.word	0x40010800
 8000200:	40010c00 	.word	0x40010c00
 8000204:	20000040 	.word	0x20000040

08000208 <ST7789_WriteSmallData>:
 * @brief Write data to ST7789 controller, simplify for 8bit data.
 * data -> data to write
 * @return none
 */
static void ST7789_WriteSmallData(uint8_t data)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b082      	sub	sp, #8
 800020c:	af00      	add	r7, sp, #0
 800020e:	4603      	mov	r3, r0
 8000210:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 8000212:	2200      	movs	r2, #0
 8000214:	2110      	movs	r1, #16
 8000216:	480c      	ldr	r0, [pc, #48]	; (8000248 <ST7789_WriteSmallData+0x40>)
 8000218:	f001 fe53 	bl	8001ec2 <HAL_GPIO_WritePin>
	ST7789_DC_Set();
 800021c:	2201      	movs	r2, #1
 800021e:	2101      	movs	r1, #1
 8000220:	480a      	ldr	r0, [pc, #40]	; (800024c <ST7789_WriteSmallData+0x44>)
 8000222:	f001 fe4e 	bl	8001ec2 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &data, sizeof(data), HAL_MAX_DELAY);
 8000226:	1df9      	adds	r1, r7, #7
 8000228:	f04f 33ff 	mov.w	r3, #4294967295
 800022c:	2201      	movs	r2, #1
 800022e:	4808      	ldr	r0, [pc, #32]	; (8000250 <ST7789_WriteSmallData+0x48>)
 8000230:	f002 face 	bl	80027d0 <HAL_SPI_Transmit>
	ST7789_UnSelect();
 8000234:	2201      	movs	r2, #1
 8000236:	2110      	movs	r1, #16
 8000238:	4803      	ldr	r0, [pc, #12]	; (8000248 <ST7789_WriteSmallData+0x40>)
 800023a:	f001 fe42 	bl	8001ec2 <HAL_GPIO_WritePin>
}
 800023e:	bf00      	nop
 8000240:	3708      	adds	r7, #8
 8000242:	46bd      	mov	sp, r7
 8000244:	bd80      	pop	{r7, pc}
 8000246:	bf00      	nop
 8000248:	40010800 	.word	0x40010800
 800024c:	40010c00 	.word	0x40010c00
 8000250:	20000040 	.word	0x20000040

08000254 <ST7789_SetRotation>:
 * @brief Set the rotation direction of the display
 * @param m -> rotation parameter(please refer it in st7789.h)
 * @return none
 */
void ST7789_SetRotation(uint8_t m)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b082      	sub	sp, #8
 8000258:	af00      	add	r7, sp, #0
 800025a:	4603      	mov	r3, r0
 800025c:	71fb      	strb	r3, [r7, #7]
	ST7789_WriteCommand(ST7789_MADCTL);	// MADCTL
 800025e:	2036      	movs	r0, #54	; 0x36
 8000260:	f7ff ff74 	bl	800014c <ST7789_WriteCommand>
	switch (m) {
 8000264:	79fb      	ldrb	r3, [r7, #7]
 8000266:	2b03      	cmp	r3, #3
 8000268:	d81a      	bhi.n	80002a0 <ST7789_SetRotation+0x4c>
 800026a:	a201      	add	r2, pc, #4	; (adr r2, 8000270 <ST7789_SetRotation+0x1c>)
 800026c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000270:	08000281 	.word	0x08000281
 8000274:	08000289 	.word	0x08000289
 8000278:	08000291 	.word	0x08000291
 800027c:	08000299 	.word	0x08000299
	case 0:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MY | ST7789_MADCTL_RGB);
 8000280:	20c0      	movs	r0, #192	; 0xc0
 8000282:	f7ff ffc1 	bl	8000208 <ST7789_WriteSmallData>
		break;
 8000286:	e00c      	b.n	80002a2 <ST7789_SetRotation+0x4e>
	case 1:
		ST7789_WriteSmallData(ST7789_MADCTL_MY | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8000288:	20a0      	movs	r0, #160	; 0xa0
 800028a:	f7ff ffbd 	bl	8000208 <ST7789_WriteSmallData>
		break;
 800028e:	e008      	b.n	80002a2 <ST7789_SetRotation+0x4e>
	case 2:
		ST7789_WriteSmallData(ST7789_MADCTL_RGB);
 8000290:	2000      	movs	r0, #0
 8000292:	f7ff ffb9 	bl	8000208 <ST7789_WriteSmallData>
		break;
 8000296:	e004      	b.n	80002a2 <ST7789_SetRotation+0x4e>
	case 3:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8000298:	2060      	movs	r0, #96	; 0x60
 800029a:	f7ff ffb5 	bl	8000208 <ST7789_WriteSmallData>
		break;
 800029e:	e000      	b.n	80002a2 <ST7789_SetRotation+0x4e>
	default:
		break;
 80002a0:	bf00      	nop
	}
}
 80002a2:	bf00      	nop
 80002a4:	3708      	adds	r7, #8
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	bf00      	nop

080002ac <ST7789_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 80002ac:	b590      	push	{r4, r7, lr}
 80002ae:	b087      	sub	sp, #28
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	4604      	mov	r4, r0
 80002b4:	4608      	mov	r0, r1
 80002b6:	4611      	mov	r1, r2
 80002b8:	461a      	mov	r2, r3
 80002ba:	4623      	mov	r3, r4
 80002bc:	80fb      	strh	r3, [r7, #6]
 80002be:	4603      	mov	r3, r0
 80002c0:	80bb      	strh	r3, [r7, #4]
 80002c2:	460b      	mov	r3, r1
 80002c4:	807b      	strh	r3, [r7, #2]
 80002c6:	4613      	mov	r3, r2
 80002c8:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 80002ca:	2200      	movs	r2, #0
 80002cc:	2110      	movs	r1, #16
 80002ce:	4824      	ldr	r0, [pc, #144]	; (8000360 <ST7789_SetAddressWindow+0xb4>)
 80002d0:	f001 fdf7 	bl	8001ec2 <HAL_GPIO_WritePin>
	uint16_t x_start = x0 + X_SHIFT, x_end = x1 + X_SHIFT;
 80002d4:	88fb      	ldrh	r3, [r7, #6]
 80002d6:	82fb      	strh	r3, [r7, #22]
 80002d8:	887b      	ldrh	r3, [r7, #2]
 80002da:	82bb      	strh	r3, [r7, #20]
	uint16_t y_start = y0 + Y_SHIFT, y_end = y1 + Y_SHIFT;
 80002dc:	88bb      	ldrh	r3, [r7, #4]
 80002de:	827b      	strh	r3, [r7, #18]
 80002e0:	883b      	ldrh	r3, [r7, #0]
 80002e2:	823b      	strh	r3, [r7, #16]
	
	/* Column Address set */
	ST7789_WriteCommand(ST7789_CASET); 
 80002e4:	202a      	movs	r0, #42	; 0x2a
 80002e6:	f7ff ff31 	bl	800014c <ST7789_WriteCommand>
	{
		uint8_t data[] = {x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF};
 80002ea:	8afb      	ldrh	r3, [r7, #22]
 80002ec:	0a1b      	lsrs	r3, r3, #8
 80002ee:	b29b      	uxth	r3, r3
 80002f0:	b2db      	uxtb	r3, r3
 80002f2:	733b      	strb	r3, [r7, #12]
 80002f4:	8afb      	ldrh	r3, [r7, #22]
 80002f6:	b2db      	uxtb	r3, r3
 80002f8:	737b      	strb	r3, [r7, #13]
 80002fa:	8abb      	ldrh	r3, [r7, #20]
 80002fc:	0a1b      	lsrs	r3, r3, #8
 80002fe:	b29b      	uxth	r3, r3
 8000300:	b2db      	uxtb	r3, r3
 8000302:	73bb      	strb	r3, [r7, #14]
 8000304:	8abb      	ldrh	r3, [r7, #20]
 8000306:	b2db      	uxtb	r3, r3
 8000308:	73fb      	strb	r3, [r7, #15]
		ST7789_WriteData(data, sizeof(data));
 800030a:	f107 030c 	add.w	r3, r7, #12
 800030e:	2104      	movs	r1, #4
 8000310:	4618      	mov	r0, r3
 8000312:	f7ff ff41 	bl	8000198 <ST7789_WriteData>
	}

	/* Row Address set */
	ST7789_WriteCommand(ST7789_RASET);
 8000316:	202b      	movs	r0, #43	; 0x2b
 8000318:	f7ff ff18 	bl	800014c <ST7789_WriteCommand>
	{
		uint8_t data[] = {y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF};
 800031c:	8a7b      	ldrh	r3, [r7, #18]
 800031e:	0a1b      	lsrs	r3, r3, #8
 8000320:	b29b      	uxth	r3, r3
 8000322:	b2db      	uxtb	r3, r3
 8000324:	723b      	strb	r3, [r7, #8]
 8000326:	8a7b      	ldrh	r3, [r7, #18]
 8000328:	b2db      	uxtb	r3, r3
 800032a:	727b      	strb	r3, [r7, #9]
 800032c:	8a3b      	ldrh	r3, [r7, #16]
 800032e:	0a1b      	lsrs	r3, r3, #8
 8000330:	b29b      	uxth	r3, r3
 8000332:	b2db      	uxtb	r3, r3
 8000334:	72bb      	strb	r3, [r7, #10]
 8000336:	8a3b      	ldrh	r3, [r7, #16]
 8000338:	b2db      	uxtb	r3, r3
 800033a:	72fb      	strb	r3, [r7, #11]
		ST7789_WriteData(data, sizeof(data));
 800033c:	f107 0308 	add.w	r3, r7, #8
 8000340:	2104      	movs	r1, #4
 8000342:	4618      	mov	r0, r3
 8000344:	f7ff ff28 	bl	8000198 <ST7789_WriteData>
	}
	/* Write to RAM */
	ST7789_WriteCommand(ST7789_RAMWR);
 8000348:	202c      	movs	r0, #44	; 0x2c
 800034a:	f7ff feff 	bl	800014c <ST7789_WriteCommand>
	ST7789_UnSelect();
 800034e:	2201      	movs	r2, #1
 8000350:	2110      	movs	r1, #16
 8000352:	4803      	ldr	r0, [pc, #12]	; (8000360 <ST7789_SetAddressWindow+0xb4>)
 8000354:	f001 fdb5 	bl	8001ec2 <HAL_GPIO_WritePin>
}
 8000358:	bf00      	nop
 800035a:	371c      	adds	r7, #28
 800035c:	46bd      	mov	sp, r7
 800035e:	bd90      	pop	{r4, r7, pc}
 8000360:	40010800 	.word	0x40010800

08000364 <ST7789_Init>:
 * @brief Initialize ST7789 controller
 * @param none
 * @return none
 */
void ST7789_Init(void)
{
 8000364:	b590      	push	{r4, r7, lr}
 8000366:	b08b      	sub	sp, #44	; 0x2c
 8000368:	af00      	add	r7, sp, #0
	#ifdef USE_DMA
		memset(disp_buf, 0, sizeof(disp_buf));
	#endif
	HAL_Delay(25);
 800036a:	2019      	movs	r0, #25
 800036c:	f001 fb32 	bl	80019d4 <HAL_Delay>
    ST7789_RST_Clr();
 8000370:	2200      	movs	r2, #0
 8000372:	2102      	movs	r1, #2
 8000374:	4846      	ldr	r0, [pc, #280]	; (8000490 <ST7789_Init+0x12c>)
 8000376:	f001 fda4 	bl	8001ec2 <HAL_GPIO_WritePin>
    HAL_Delay(25);
 800037a:	2019      	movs	r0, #25
 800037c:	f001 fb2a 	bl	80019d4 <HAL_Delay>
    ST7789_RST_Set();
 8000380:	2201      	movs	r2, #1
 8000382:	2102      	movs	r1, #2
 8000384:	4842      	ldr	r0, [pc, #264]	; (8000490 <ST7789_Init+0x12c>)
 8000386:	f001 fd9c 	bl	8001ec2 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 800038a:	2032      	movs	r0, #50	; 0x32
 800038c:	f001 fb22 	bl	80019d4 <HAL_Delay>
		
    ST7789_WriteCommand(ST7789_COLMOD);		//	Set color mode
 8000390:	203a      	movs	r0, #58	; 0x3a
 8000392:	f7ff fedb 	bl	800014c <ST7789_WriteCommand>
    ST7789_WriteSmallData(ST7789_COLOR_MODE_16bit);
 8000396:	2055      	movs	r0, #85	; 0x55
 8000398:	f7ff ff36 	bl	8000208 <ST7789_WriteSmallData>
  	ST7789_WriteCommand(0xB2);				//	Porch control
 800039c:	20b2      	movs	r0, #178	; 0xb2
 800039e:	f7ff fed5 	bl	800014c <ST7789_WriteCommand>
	{
		uint8_t data[] = {0x0C, 0x0C, 0x00, 0x33, 0x33};
 80003a2:	4a3c      	ldr	r2, [pc, #240]	; (8000494 <ST7789_Init+0x130>)
 80003a4:	f107 0320 	add.w	r3, r7, #32
 80003a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80003ac:	6018      	str	r0, [r3, #0]
 80003ae:	3304      	adds	r3, #4
 80003b0:	7019      	strb	r1, [r3, #0]
		ST7789_WriteData(data, sizeof(data));
 80003b2:	f107 0320 	add.w	r3, r7, #32
 80003b6:	2105      	movs	r1, #5
 80003b8:	4618      	mov	r0, r3
 80003ba:	f7ff feed 	bl	8000198 <ST7789_WriteData>
	}
	ST7789_SetRotation(ST7789_ROTATION);	//	MADCTL (Display Rotation)
 80003be:	2002      	movs	r0, #2
 80003c0:	f7ff ff48 	bl	8000254 <ST7789_SetRotation>
	
	/* Internal LCD Voltage generator settings */
    ST7789_WriteCommand(0XB7);				//	Gate Control
 80003c4:	20b7      	movs	r0, #183	; 0xb7
 80003c6:	f7ff fec1 	bl	800014c <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x35);			//	Default value
 80003ca:	2035      	movs	r0, #53	; 0x35
 80003cc:	f7ff ff1c 	bl	8000208 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xBB);				//	VCOM setting
 80003d0:	20bb      	movs	r0, #187	; 0xbb
 80003d2:	f7ff febb 	bl	800014c <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x19);			//	0.725v (default 0.75v for 0x20)
 80003d6:	2019      	movs	r0, #25
 80003d8:	f7ff ff16 	bl	8000208 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC0);				//	LCMCTRL	
 80003dc:	20c0      	movs	r0, #192	; 0xc0
 80003de:	f7ff feb5 	bl	800014c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x2C);			//	Default value
 80003e2:	202c      	movs	r0, #44	; 0x2c
 80003e4:	f7ff ff10 	bl	8000208 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC2);				//	VDV and VRH command Enable
 80003e8:	20c2      	movs	r0, #194	; 0xc2
 80003ea:	f7ff feaf 	bl	800014c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x01);			//	Default value
 80003ee:	2001      	movs	r0, #1
 80003f0:	f7ff ff0a 	bl	8000208 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC3);				//	VRH set
 80003f4:	20c3      	movs	r0, #195	; 0xc3
 80003f6:	f7ff fea9 	bl	800014c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x12);			//	+-4.45v (defalut +-4.1v for 0x0B)
 80003fa:	2012      	movs	r0, #18
 80003fc:	f7ff ff04 	bl	8000208 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC4);				//	VDV set
 8000400:	20c4      	movs	r0, #196	; 0xc4
 8000402:	f7ff fea3 	bl	800014c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x20);			//	Default value
 8000406:	2020      	movs	r0, #32
 8000408:	f7ff fefe 	bl	8000208 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC6);				//	Frame rate control in normal mode
 800040c:	20c6      	movs	r0, #198	; 0xc6
 800040e:	f7ff fe9d 	bl	800014c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x0F);			//	Default value (60HZ)
 8000412:	200f      	movs	r0, #15
 8000414:	f7ff fef8 	bl	8000208 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xD0);				//	Power control
 8000418:	20d0      	movs	r0, #208	; 0xd0
 800041a:	f7ff fe97 	bl	800014c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0xA4);			//	Default value
 800041e:	20a4      	movs	r0, #164	; 0xa4
 8000420:	f7ff fef2 	bl	8000208 <ST7789_WriteSmallData>
    ST7789_WriteSmallData (0xA1);			//	Default value
 8000424:	20a1      	movs	r0, #161	; 0xa1
 8000426:	f7ff feef 	bl	8000208 <ST7789_WriteSmallData>
	/**************** Division line ****************/

	ST7789_WriteCommand(0xE0);
 800042a:	20e0      	movs	r0, #224	; 0xe0
 800042c:	f7ff fe8e 	bl	800014c <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0D, 0x11, 0x13, 0x2B, 0x3F, 0x54, 0x4C, 0x18, 0x0D, 0x0B, 0x1F, 0x23};
 8000430:	4b19      	ldr	r3, [pc, #100]	; (8000498 <ST7789_Init+0x134>)
 8000432:	f107 0410 	add.w	r4, r7, #16
 8000436:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000438:	c407      	stmia	r4!, {r0, r1, r2}
 800043a:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 800043c:	f107 0310 	add.w	r3, r7, #16
 8000440:	210e      	movs	r1, #14
 8000442:	4618      	mov	r0, r3
 8000444:	f7ff fea8 	bl	8000198 <ST7789_WriteData>
	}

    ST7789_WriteCommand(0xE1);
 8000448:	20e1      	movs	r0, #225	; 0xe1
 800044a:	f7ff fe7f 	bl	800014c <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0C, 0x11, 0x13, 0x2C, 0x3F, 0x44, 0x51, 0x2F, 0x1F, 0x1F, 0x20, 0x23};
 800044e:	4b13      	ldr	r3, [pc, #76]	; (800049c <ST7789_Init+0x138>)
 8000450:	463c      	mov	r4, r7
 8000452:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000454:	c407      	stmia	r4!, {r0, r1, r2}
 8000456:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8000458:	463b      	mov	r3, r7
 800045a:	210e      	movs	r1, #14
 800045c:	4618      	mov	r0, r3
 800045e:	f7ff fe9b 	bl	8000198 <ST7789_WriteData>
	}
    ST7789_WriteCommand (ST7789_INVON);		//	Inversion ON
 8000462:	2021      	movs	r0, #33	; 0x21
 8000464:	f7ff fe72 	bl	800014c <ST7789_WriteCommand>
	ST7789_WriteCommand (ST7789_SLPOUT);	//	Out of sleep mode
 8000468:	2011      	movs	r0, #17
 800046a:	f7ff fe6f 	bl	800014c <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_NORON);		//	Normal Display on
 800046e:	2013      	movs	r0, #19
 8000470:	f7ff fe6c 	bl	800014c <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_DISPON);	//	Main screen turned on	
 8000474:	2029      	movs	r0, #41	; 0x29
 8000476:	f7ff fe69 	bl	800014c <ST7789_WriteCommand>

	HAL_Delay(50);
 800047a:	2032      	movs	r0, #50	; 0x32
 800047c:	f001 faaa 	bl	80019d4 <HAL_Delay>
	ST7789_Fill_Color(BLACK);				//	Fill with Black.
 8000480:	2000      	movs	r0, #0
 8000482:	f000 f80d 	bl	80004a0 <ST7789_Fill_Color>
}
 8000486:	bf00      	nop
 8000488:	372c      	adds	r7, #44	; 0x2c
 800048a:	46bd      	mov	sp, r7
 800048c:	bd90      	pop	{r4, r7, pc}
 800048e:	bf00      	nop
 8000490:	40010c00 	.word	0x40010c00
 8000494:	08002c04 	.word	0x08002c04
 8000498:	08002c0c 	.word	0x08002c0c
 800049c:	08002c1c 	.word	0x08002c1c

080004a0 <ST7789_Fill_Color>:
 * @brief Fill the DisplayWindow with single color
 * @param color -> color to Fill with
 * @return none
 */
void ST7789_Fill_Color(uint16_t color)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b084      	sub	sp, #16
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	4603      	mov	r3, r0
 80004a8:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	ST7789_SetAddressWindow(0, 0, ST7789_WIDTH - 1, ST7789_HEIGHT - 1);
 80004aa:	23ef      	movs	r3, #239	; 0xef
 80004ac:	22ef      	movs	r2, #239	; 0xef
 80004ae:	2100      	movs	r1, #0
 80004b0:	2000      	movs	r0, #0
 80004b2:	f7ff fefb 	bl	80002ac <ST7789_SetAddressWindow>
			memset(disp_buf, color, sizeof(disp_buf));
			ST7789_WriteData(disp_buf, sizeof(disp_buf));
		}
	#else
		uint16_t j;
		for (i = 0; i < ST7789_WIDTH; i++)
 80004b6:	2300      	movs	r3, #0
 80004b8:	81fb      	strh	r3, [r7, #14]
 80004ba:	e019      	b.n	80004f0 <ST7789_Fill_Color+0x50>
				for (j = 0; j < ST7789_HEIGHT; j++) {
 80004bc:	2300      	movs	r3, #0
 80004be:	81bb      	strh	r3, [r7, #12]
 80004c0:	e010      	b.n	80004e4 <ST7789_Fill_Color+0x44>
					uint8_t data[] = {color >> 8, color & 0xFF};
 80004c2:	88fb      	ldrh	r3, [r7, #6]
 80004c4:	0a1b      	lsrs	r3, r3, #8
 80004c6:	b29b      	uxth	r3, r3
 80004c8:	b2db      	uxtb	r3, r3
 80004ca:	723b      	strb	r3, [r7, #8]
 80004cc:	88fb      	ldrh	r3, [r7, #6]
 80004ce:	b2db      	uxtb	r3, r3
 80004d0:	727b      	strb	r3, [r7, #9]
					ST7789_WriteData(data, sizeof(data));
 80004d2:	f107 0308 	add.w	r3, r7, #8
 80004d6:	2102      	movs	r1, #2
 80004d8:	4618      	mov	r0, r3
 80004da:	f7ff fe5d 	bl	8000198 <ST7789_WriteData>
				for (j = 0; j < ST7789_HEIGHT; j++) {
 80004de:	89bb      	ldrh	r3, [r7, #12]
 80004e0:	3301      	adds	r3, #1
 80004e2:	81bb      	strh	r3, [r7, #12]
 80004e4:	89bb      	ldrh	r3, [r7, #12]
 80004e6:	2bef      	cmp	r3, #239	; 0xef
 80004e8:	d9eb      	bls.n	80004c2 <ST7789_Fill_Color+0x22>
		for (i = 0; i < ST7789_WIDTH; i++)
 80004ea:	89fb      	ldrh	r3, [r7, #14]
 80004ec:	3301      	adds	r3, #1
 80004ee:	81fb      	strh	r3, [r7, #14]
 80004f0:	89fb      	ldrh	r3, [r7, #14]
 80004f2:	2bef      	cmp	r3, #239	; 0xef
 80004f4:	d9e2      	bls.n	80004bc <ST7789_Fill_Color+0x1c>
				}
	#endif
	//ALGG ST7789_UnSelect();
}
 80004f6:	bf00      	nop
 80004f8:	3710      	adds	r7, #16
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}
	...

08000500 <ST7789_DrawPixel>:
 * @param x&y -> coordinate to Draw
 * @param color -> color of the Pixel
 * @return none
 */
void ST7789_DrawPixel(uint16_t x, uint16_t y, uint16_t color)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b084      	sub	sp, #16
 8000504:	af00      	add	r7, sp, #0
 8000506:	4603      	mov	r3, r0
 8000508:	80fb      	strh	r3, [r7, #6]
 800050a:	460b      	mov	r3, r1
 800050c:	80bb      	strh	r3, [r7, #4]
 800050e:	4613      	mov	r3, r2
 8000510:	807b      	strh	r3, [r7, #2]
	if ((x < 0) || (x >= ST7789_WIDTH) ||
 8000512:	88fb      	ldrh	r3, [r7, #6]
 8000514:	2bef      	cmp	r3, #239	; 0xef
 8000516:	d821      	bhi.n	800055c <ST7789_DrawPixel+0x5c>
		 (y < 0) || (y >= ST7789_HEIGHT))	return;
 8000518:	88bb      	ldrh	r3, [r7, #4]
 800051a:	2bef      	cmp	r3, #239	; 0xef
 800051c:	d81e      	bhi.n	800055c <ST7789_DrawPixel+0x5c>
	
	ST7789_SetAddressWindow(x, y, x, y);
 800051e:	88bb      	ldrh	r3, [r7, #4]
 8000520:	88fa      	ldrh	r2, [r7, #6]
 8000522:	88b9      	ldrh	r1, [r7, #4]
 8000524:	88f8      	ldrh	r0, [r7, #6]
 8000526:	f7ff fec1 	bl	80002ac <ST7789_SetAddressWindow>
	uint8_t data[] = {color >> 8, color & 0xFF};
 800052a:	887b      	ldrh	r3, [r7, #2]
 800052c:	0a1b      	lsrs	r3, r3, #8
 800052e:	b29b      	uxth	r3, r3
 8000530:	b2db      	uxtb	r3, r3
 8000532:	733b      	strb	r3, [r7, #12]
 8000534:	887b      	ldrh	r3, [r7, #2]
 8000536:	b2db      	uxtb	r3, r3
 8000538:	737b      	strb	r3, [r7, #13]
	ST7789_Select();
 800053a:	2200      	movs	r2, #0
 800053c:	2110      	movs	r1, #16
 800053e:	4809      	ldr	r0, [pc, #36]	; (8000564 <ST7789_DrawPixel+0x64>)
 8000540:	f001 fcbf 	bl	8001ec2 <HAL_GPIO_WritePin>
	ST7789_WriteData(data, sizeof(data));
 8000544:	f107 030c 	add.w	r3, r7, #12
 8000548:	2102      	movs	r1, #2
 800054a:	4618      	mov	r0, r3
 800054c:	f7ff fe24 	bl	8000198 <ST7789_WriteData>
	ST7789_UnSelect();
 8000550:	2201      	movs	r2, #1
 8000552:	2110      	movs	r1, #16
 8000554:	4803      	ldr	r0, [pc, #12]	; (8000564 <ST7789_DrawPixel+0x64>)
 8000556:	f001 fcb4 	bl	8001ec2 <HAL_GPIO_WritePin>
 800055a:	e000      	b.n	800055e <ST7789_DrawPixel+0x5e>
		 (y < 0) || (y >= ST7789_HEIGHT))	return;
 800055c:	bf00      	nop
}
 800055e:	3710      	adds	r7, #16
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	40010800 	.word	0x40010800

08000568 <ST7789_DrawLine>:
 * @param x2&y2 -> coordinate of the end point
 * @param color -> color of the line to Draw
 * @return none
 */
void ST7789_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1,
        uint16_t color) {
 8000568:	b590      	push	{r4, r7, lr}
 800056a:	b087      	sub	sp, #28
 800056c:	af00      	add	r7, sp, #0
 800056e:	4604      	mov	r4, r0
 8000570:	4608      	mov	r0, r1
 8000572:	4611      	mov	r1, r2
 8000574:	461a      	mov	r2, r3
 8000576:	4623      	mov	r3, r4
 8000578:	80fb      	strh	r3, [r7, #6]
 800057a:	4603      	mov	r3, r0
 800057c:	80bb      	strh	r3, [r7, #4]
 800057e:	460b      	mov	r3, r1
 8000580:	807b      	strh	r3, [r7, #2]
 8000582:	4613      	mov	r3, r2
 8000584:	803b      	strh	r3, [r7, #0]
	uint16_t swap;
    uint16_t steep = ABS(y1 - y0) > ABS(x1 - x0);
 8000586:	883a      	ldrh	r2, [r7, #0]
 8000588:	88bb      	ldrh	r3, [r7, #4]
 800058a:	1ad3      	subs	r3, r2, r3
 800058c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000590:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000594:	8879      	ldrh	r1, [r7, #2]
 8000596:	88fb      	ldrh	r3, [r7, #6]
 8000598:	1acb      	subs	r3, r1, r3
 800059a:	2b00      	cmp	r3, #0
 800059c:	bfb8      	it	lt
 800059e:	425b      	neglt	r3, r3
 80005a0:	429a      	cmp	r2, r3
 80005a2:	bfcc      	ite	gt
 80005a4:	2301      	movgt	r3, #1
 80005a6:	2300      	movle	r3, #0
 80005a8:	b2db      	uxtb	r3, r3
 80005aa:	827b      	strh	r3, [r7, #18]
    if (steep) {
 80005ac:	8a7b      	ldrh	r3, [r7, #18]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d00b      	beq.n	80005ca <ST7789_DrawLine+0x62>
		swap = x0;
 80005b2:	88fb      	ldrh	r3, [r7, #6]
 80005b4:	823b      	strh	r3, [r7, #16]
		x0 = y0;
 80005b6:	88bb      	ldrh	r3, [r7, #4]
 80005b8:	80fb      	strh	r3, [r7, #6]
		y0 = swap;
 80005ba:	8a3b      	ldrh	r3, [r7, #16]
 80005bc:	80bb      	strh	r3, [r7, #4]

		swap = x1;
 80005be:	887b      	ldrh	r3, [r7, #2]
 80005c0:	823b      	strh	r3, [r7, #16]
		x1 = y1;
 80005c2:	883b      	ldrh	r3, [r7, #0]
 80005c4:	807b      	strh	r3, [r7, #2]
		y1 = swap;
 80005c6:	8a3b      	ldrh	r3, [r7, #16]
 80005c8:	803b      	strh	r3, [r7, #0]
        //_swap_int16_t(x0, y0);
        //_swap_int16_t(x1, y1);
    }

    if (x0 > x1) {
 80005ca:	88fa      	ldrh	r2, [r7, #6]
 80005cc:	887b      	ldrh	r3, [r7, #2]
 80005ce:	429a      	cmp	r2, r3
 80005d0:	d90b      	bls.n	80005ea <ST7789_DrawLine+0x82>
		swap = x0;
 80005d2:	88fb      	ldrh	r3, [r7, #6]
 80005d4:	823b      	strh	r3, [r7, #16]
		x0 = x1;
 80005d6:	887b      	ldrh	r3, [r7, #2]
 80005d8:	80fb      	strh	r3, [r7, #6]
		x1 = swap;
 80005da:	8a3b      	ldrh	r3, [r7, #16]
 80005dc:	807b      	strh	r3, [r7, #2]

		swap = y0;
 80005de:	88bb      	ldrh	r3, [r7, #4]
 80005e0:	823b      	strh	r3, [r7, #16]
		y0 = y1;
 80005e2:	883b      	ldrh	r3, [r7, #0]
 80005e4:	80bb      	strh	r3, [r7, #4]
		y1 = swap;
 80005e6:	8a3b      	ldrh	r3, [r7, #16]
 80005e8:	803b      	strh	r3, [r7, #0]
        //_swap_int16_t(x0, x1);
        //_swap_int16_t(y0, y1);
    }

    int16_t dx, dy;
    dx = x1 - x0;
 80005ea:	887a      	ldrh	r2, [r7, #2]
 80005ec:	88fb      	ldrh	r3, [r7, #6]
 80005ee:	1ad3      	subs	r3, r2, r3
 80005f0:	b29b      	uxth	r3, r3
 80005f2:	81fb      	strh	r3, [r7, #14]
    dy = ABS(y1 - y0);
 80005f4:	883a      	ldrh	r2, [r7, #0]
 80005f6:	88bb      	ldrh	r3, [r7, #4]
 80005f8:	1ad3      	subs	r3, r2, r3
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	bfb8      	it	lt
 80005fe:	425b      	neglt	r3, r3
 8000600:	81bb      	strh	r3, [r7, #12]

    int16_t err = dx / 2;
 8000602:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000606:	0fda      	lsrs	r2, r3, #31
 8000608:	4413      	add	r3, r2
 800060a:	105b      	asrs	r3, r3, #1
 800060c:	82fb      	strh	r3, [r7, #22]
    int16_t ystep;

    if (y0 < y1) {
 800060e:	88ba      	ldrh	r2, [r7, #4]
 8000610:	883b      	ldrh	r3, [r7, #0]
 8000612:	429a      	cmp	r2, r3
 8000614:	d202      	bcs.n	800061c <ST7789_DrawLine+0xb4>
        ystep = 1;
 8000616:	2301      	movs	r3, #1
 8000618:	82bb      	strh	r3, [r7, #20]
 800061a:	e028      	b.n	800066e <ST7789_DrawLine+0x106>
    } else {
        ystep = -1;
 800061c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000620:	82bb      	strh	r3, [r7, #20]
    }

    for (; x0<=x1; x0++) {
 8000622:	e024      	b.n	800066e <ST7789_DrawLine+0x106>
        if (steep) {
 8000624:	8a7b      	ldrh	r3, [r7, #18]
 8000626:	2b00      	cmp	r3, #0
 8000628:	d006      	beq.n	8000638 <ST7789_DrawLine+0xd0>
            ST7789_DrawPixel(y0, x0, color);
 800062a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800062c:	88f9      	ldrh	r1, [r7, #6]
 800062e:	88bb      	ldrh	r3, [r7, #4]
 8000630:	4618      	mov	r0, r3
 8000632:	f7ff ff65 	bl	8000500 <ST7789_DrawPixel>
 8000636:	e005      	b.n	8000644 <ST7789_DrawLine+0xdc>
        } else {
            ST7789_DrawPixel(x0, y0, color);
 8000638:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800063a:	88b9      	ldrh	r1, [r7, #4]
 800063c:	88fb      	ldrh	r3, [r7, #6]
 800063e:	4618      	mov	r0, r3
 8000640:	f7ff ff5e 	bl	8000500 <ST7789_DrawPixel>
        }
        err -= dy;
 8000644:	8afa      	ldrh	r2, [r7, #22]
 8000646:	89bb      	ldrh	r3, [r7, #12]
 8000648:	1ad3      	subs	r3, r2, r3
 800064a:	b29b      	uxth	r3, r3
 800064c:	82fb      	strh	r3, [r7, #22]
        if (err < 0) {
 800064e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000652:	2b00      	cmp	r3, #0
 8000654:	da08      	bge.n	8000668 <ST7789_DrawLine+0x100>
            y0 += ystep;
 8000656:	8aba      	ldrh	r2, [r7, #20]
 8000658:	88bb      	ldrh	r3, [r7, #4]
 800065a:	4413      	add	r3, r2
 800065c:	80bb      	strh	r3, [r7, #4]
            err += dx;
 800065e:	8afa      	ldrh	r2, [r7, #22]
 8000660:	89fb      	ldrh	r3, [r7, #14]
 8000662:	4413      	add	r3, r2
 8000664:	b29b      	uxth	r3, r3
 8000666:	82fb      	strh	r3, [r7, #22]
    for (; x0<=x1; x0++) {
 8000668:	88fb      	ldrh	r3, [r7, #6]
 800066a:	3301      	adds	r3, #1
 800066c:	80fb      	strh	r3, [r7, #6]
 800066e:	88fa      	ldrh	r2, [r7, #6]
 8000670:	887b      	ldrh	r3, [r7, #2]
 8000672:	429a      	cmp	r2, r3
 8000674:	d9d6      	bls.n	8000624 <ST7789_DrawLine+0xbc>
        }
    }
}
 8000676:	bf00      	nop
 8000678:	371c      	adds	r7, #28
 800067a:	46bd      	mov	sp, r7
 800067c:	bd90      	pop	{r4, r7, pc}
	...

08000680 <ST7789_DrawRectangle>:
 * @param xi&yi -> 2 coordinates of 2 top points.
 * @param color -> color of the Rectangle line
 * @return none
 */
void ST7789_DrawRectangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color)
{
 8000680:	b590      	push	{r4, r7, lr}
 8000682:	b085      	sub	sp, #20
 8000684:	af02      	add	r7, sp, #8
 8000686:	4604      	mov	r4, r0
 8000688:	4608      	mov	r0, r1
 800068a:	4611      	mov	r1, r2
 800068c:	461a      	mov	r2, r3
 800068e:	4623      	mov	r3, r4
 8000690:	80fb      	strh	r3, [r7, #6]
 8000692:	4603      	mov	r3, r0
 8000694:	80bb      	strh	r3, [r7, #4]
 8000696:	460b      	mov	r3, r1
 8000698:	807b      	strh	r3, [r7, #2]
 800069a:	4613      	mov	r3, r2
 800069c:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 800069e:	2200      	movs	r2, #0
 80006a0:	2110      	movs	r1, #16
 80006a2:	4818      	ldr	r0, [pc, #96]	; (8000704 <ST7789_DrawRectangle+0x84>)
 80006a4:	f001 fc0d 	bl	8001ec2 <HAL_GPIO_WritePin>
	ST7789_DrawLine(x1, y1, x2, y1, color);
 80006a8:	88bc      	ldrh	r4, [r7, #4]
 80006aa:	887a      	ldrh	r2, [r7, #2]
 80006ac:	88b9      	ldrh	r1, [r7, #4]
 80006ae:	88f8      	ldrh	r0, [r7, #6]
 80006b0:	8b3b      	ldrh	r3, [r7, #24]
 80006b2:	9300      	str	r3, [sp, #0]
 80006b4:	4623      	mov	r3, r4
 80006b6:	f7ff ff57 	bl	8000568 <ST7789_DrawLine>
	ST7789_DrawLine(x1, y1, x1, y2, color);
 80006ba:	883c      	ldrh	r4, [r7, #0]
 80006bc:	88fa      	ldrh	r2, [r7, #6]
 80006be:	88b9      	ldrh	r1, [r7, #4]
 80006c0:	88f8      	ldrh	r0, [r7, #6]
 80006c2:	8b3b      	ldrh	r3, [r7, #24]
 80006c4:	9300      	str	r3, [sp, #0]
 80006c6:	4623      	mov	r3, r4
 80006c8:	f7ff ff4e 	bl	8000568 <ST7789_DrawLine>
	ST7789_DrawLine(x1, y2, x2, y2, color);
 80006cc:	883c      	ldrh	r4, [r7, #0]
 80006ce:	887a      	ldrh	r2, [r7, #2]
 80006d0:	8839      	ldrh	r1, [r7, #0]
 80006d2:	88f8      	ldrh	r0, [r7, #6]
 80006d4:	8b3b      	ldrh	r3, [r7, #24]
 80006d6:	9300      	str	r3, [sp, #0]
 80006d8:	4623      	mov	r3, r4
 80006da:	f7ff ff45 	bl	8000568 <ST7789_DrawLine>
	ST7789_DrawLine(x2, y1, x2, y2, color);
 80006de:	883c      	ldrh	r4, [r7, #0]
 80006e0:	887a      	ldrh	r2, [r7, #2]
 80006e2:	88b9      	ldrh	r1, [r7, #4]
 80006e4:	8878      	ldrh	r0, [r7, #2]
 80006e6:	8b3b      	ldrh	r3, [r7, #24]
 80006e8:	9300      	str	r3, [sp, #0]
 80006ea:	4623      	mov	r3, r4
 80006ec:	f7ff ff3c 	bl	8000568 <ST7789_DrawLine>
	ST7789_UnSelect();
 80006f0:	2201      	movs	r2, #1
 80006f2:	2110      	movs	r1, #16
 80006f4:	4803      	ldr	r0, [pc, #12]	; (8000704 <ST7789_DrawRectangle+0x84>)
 80006f6:	f001 fbe4 	bl	8001ec2 <HAL_GPIO_WritePin>
}
 80006fa:	bf00      	nop
 80006fc:	370c      	adds	r7, #12
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd90      	pop	{r4, r7, pc}
 8000702:	bf00      	nop
 8000704:	40010800 	.word	0x40010800

08000708 <ST7789_DrawCircle>:
 * @param r -> radius of circle
 * @param color -> color of circle line
 * @return  none
 */
void ST7789_DrawCircle(uint16_t x0, uint16_t y0, uint8_t r, uint16_t color)
{
 8000708:	b590      	push	{r4, r7, lr}
 800070a:	b087      	sub	sp, #28
 800070c:	af00      	add	r7, sp, #0
 800070e:	4604      	mov	r4, r0
 8000710:	4608      	mov	r0, r1
 8000712:	4611      	mov	r1, r2
 8000714:	461a      	mov	r2, r3
 8000716:	4623      	mov	r3, r4
 8000718:	80fb      	strh	r3, [r7, #6]
 800071a:	4603      	mov	r3, r0
 800071c:	80bb      	strh	r3, [r7, #4]
 800071e:	460b      	mov	r3, r1
 8000720:	70fb      	strb	r3, [r7, #3]
 8000722:	4613      	mov	r3, r2
 8000724:	803b      	strh	r3, [r7, #0]
	int16_t f = 1 - r;
 8000726:	78fb      	ldrb	r3, [r7, #3]
 8000728:	b29b      	uxth	r3, r3
 800072a:	f1c3 0301 	rsb	r3, r3, #1
 800072e:	b29b      	uxth	r3, r3
 8000730:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8000732:	2301      	movs	r3, #1
 8000734:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 8000736:	78fb      	ldrb	r3, [r7, #3]
 8000738:	b29b      	uxth	r3, r3
 800073a:	461a      	mov	r2, r3
 800073c:	03d2      	lsls	r2, r2, #15
 800073e:	1ad3      	subs	r3, r2, r3
 8000740:	005b      	lsls	r3, r3, #1
 8000742:	b29b      	uxth	r3, r3
 8000744:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 8000746:	2300      	movs	r3, #0
 8000748:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 800074a:	78fb      	ldrb	r3, [r7, #3]
 800074c:	81fb      	strh	r3, [r7, #14]

	ST7789_Select();
 800074e:	2200      	movs	r2, #0
 8000750:	2110      	movs	r1, #16
 8000752:	485f      	ldr	r0, [pc, #380]	; (80008d0 <ST7789_DrawCircle+0x1c8>)
 8000754:	f001 fbb5 	bl	8001ec2 <HAL_GPIO_WritePin>
	ST7789_DrawPixel(x0, y0 + r, color);
 8000758:	78fb      	ldrb	r3, [r7, #3]
 800075a:	b29a      	uxth	r2, r3
 800075c:	88bb      	ldrh	r3, [r7, #4]
 800075e:	4413      	add	r3, r2
 8000760:	b299      	uxth	r1, r3
 8000762:	883a      	ldrh	r2, [r7, #0]
 8000764:	88fb      	ldrh	r3, [r7, #6]
 8000766:	4618      	mov	r0, r3
 8000768:	f7ff feca 	bl	8000500 <ST7789_DrawPixel>
	ST7789_DrawPixel(x0, y0 - r, color);
 800076c:	78fb      	ldrb	r3, [r7, #3]
 800076e:	b29b      	uxth	r3, r3
 8000770:	88ba      	ldrh	r2, [r7, #4]
 8000772:	1ad3      	subs	r3, r2, r3
 8000774:	b299      	uxth	r1, r3
 8000776:	883a      	ldrh	r2, [r7, #0]
 8000778:	88fb      	ldrh	r3, [r7, #6]
 800077a:	4618      	mov	r0, r3
 800077c:	f7ff fec0 	bl	8000500 <ST7789_DrawPixel>
	ST7789_DrawPixel(x0 + r, y0, color);
 8000780:	78fb      	ldrb	r3, [r7, #3]
 8000782:	b29a      	uxth	r2, r3
 8000784:	88fb      	ldrh	r3, [r7, #6]
 8000786:	4413      	add	r3, r2
 8000788:	b29b      	uxth	r3, r3
 800078a:	883a      	ldrh	r2, [r7, #0]
 800078c:	88b9      	ldrh	r1, [r7, #4]
 800078e:	4618      	mov	r0, r3
 8000790:	f7ff feb6 	bl	8000500 <ST7789_DrawPixel>
	ST7789_DrawPixel(x0 - r, y0, color);
 8000794:	78fb      	ldrb	r3, [r7, #3]
 8000796:	b29b      	uxth	r3, r3
 8000798:	88fa      	ldrh	r2, [r7, #6]
 800079a:	1ad3      	subs	r3, r2, r3
 800079c:	b29b      	uxth	r3, r3
 800079e:	883a      	ldrh	r2, [r7, #0]
 80007a0:	88b9      	ldrh	r1, [r7, #4]
 80007a2:	4618      	mov	r0, r3
 80007a4:	f7ff feac 	bl	8000500 <ST7789_DrawPixel>

	while (x < y) {
 80007a8:	e081      	b.n	80008ae <ST7789_DrawCircle+0x1a6>
		if (f >= 0) {
 80007aa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	db0e      	blt.n	80007d0 <ST7789_DrawCircle+0xc8>
			y--;
 80007b2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80007b6:	b29b      	uxth	r3, r3
 80007b8:	3b01      	subs	r3, #1
 80007ba:	b29b      	uxth	r3, r3
 80007bc:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 80007be:	8a7b      	ldrh	r3, [r7, #18]
 80007c0:	3302      	adds	r3, #2
 80007c2:	b29b      	uxth	r3, r3
 80007c4:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 80007c6:	8afa      	ldrh	r2, [r7, #22]
 80007c8:	8a7b      	ldrh	r3, [r7, #18]
 80007ca:	4413      	add	r3, r2
 80007cc:	b29b      	uxth	r3, r3
 80007ce:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 80007d0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80007d4:	b29b      	uxth	r3, r3
 80007d6:	3301      	adds	r3, #1
 80007d8:	b29b      	uxth	r3, r3
 80007da:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 80007dc:	8abb      	ldrh	r3, [r7, #20]
 80007de:	3302      	adds	r3, #2
 80007e0:	b29b      	uxth	r3, r3
 80007e2:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 80007e4:	8afa      	ldrh	r2, [r7, #22]
 80007e6:	8abb      	ldrh	r3, [r7, #20]
 80007e8:	4413      	add	r3, r2
 80007ea:	b29b      	uxth	r3, r3
 80007ec:	82fb      	strh	r3, [r7, #22]

		ST7789_DrawPixel(x0 + x, y0 + y, color);
 80007ee:	8a3a      	ldrh	r2, [r7, #16]
 80007f0:	88fb      	ldrh	r3, [r7, #6]
 80007f2:	4413      	add	r3, r2
 80007f4:	b298      	uxth	r0, r3
 80007f6:	89fa      	ldrh	r2, [r7, #14]
 80007f8:	88bb      	ldrh	r3, [r7, #4]
 80007fa:	4413      	add	r3, r2
 80007fc:	b29b      	uxth	r3, r3
 80007fe:	883a      	ldrh	r2, [r7, #0]
 8000800:	4619      	mov	r1, r3
 8000802:	f7ff fe7d 	bl	8000500 <ST7789_DrawPixel>
		ST7789_DrawPixel(x0 - x, y0 + y, color);
 8000806:	8a3b      	ldrh	r3, [r7, #16]
 8000808:	88fa      	ldrh	r2, [r7, #6]
 800080a:	1ad3      	subs	r3, r2, r3
 800080c:	b298      	uxth	r0, r3
 800080e:	89fa      	ldrh	r2, [r7, #14]
 8000810:	88bb      	ldrh	r3, [r7, #4]
 8000812:	4413      	add	r3, r2
 8000814:	b29b      	uxth	r3, r3
 8000816:	883a      	ldrh	r2, [r7, #0]
 8000818:	4619      	mov	r1, r3
 800081a:	f7ff fe71 	bl	8000500 <ST7789_DrawPixel>
		ST7789_DrawPixel(x0 + x, y0 - y, color);
 800081e:	8a3a      	ldrh	r2, [r7, #16]
 8000820:	88fb      	ldrh	r3, [r7, #6]
 8000822:	4413      	add	r3, r2
 8000824:	b298      	uxth	r0, r3
 8000826:	89fb      	ldrh	r3, [r7, #14]
 8000828:	88ba      	ldrh	r2, [r7, #4]
 800082a:	1ad3      	subs	r3, r2, r3
 800082c:	b29b      	uxth	r3, r3
 800082e:	883a      	ldrh	r2, [r7, #0]
 8000830:	4619      	mov	r1, r3
 8000832:	f7ff fe65 	bl	8000500 <ST7789_DrawPixel>
		ST7789_DrawPixel(x0 - x, y0 - y, color);
 8000836:	8a3b      	ldrh	r3, [r7, #16]
 8000838:	88fa      	ldrh	r2, [r7, #6]
 800083a:	1ad3      	subs	r3, r2, r3
 800083c:	b298      	uxth	r0, r3
 800083e:	89fb      	ldrh	r3, [r7, #14]
 8000840:	88ba      	ldrh	r2, [r7, #4]
 8000842:	1ad3      	subs	r3, r2, r3
 8000844:	b29b      	uxth	r3, r3
 8000846:	883a      	ldrh	r2, [r7, #0]
 8000848:	4619      	mov	r1, r3
 800084a:	f7ff fe59 	bl	8000500 <ST7789_DrawPixel>

		ST7789_DrawPixel(x0 + y, y0 + x, color);
 800084e:	89fa      	ldrh	r2, [r7, #14]
 8000850:	88fb      	ldrh	r3, [r7, #6]
 8000852:	4413      	add	r3, r2
 8000854:	b298      	uxth	r0, r3
 8000856:	8a3a      	ldrh	r2, [r7, #16]
 8000858:	88bb      	ldrh	r3, [r7, #4]
 800085a:	4413      	add	r3, r2
 800085c:	b29b      	uxth	r3, r3
 800085e:	883a      	ldrh	r2, [r7, #0]
 8000860:	4619      	mov	r1, r3
 8000862:	f7ff fe4d 	bl	8000500 <ST7789_DrawPixel>
		ST7789_DrawPixel(x0 - y, y0 + x, color);
 8000866:	89fb      	ldrh	r3, [r7, #14]
 8000868:	88fa      	ldrh	r2, [r7, #6]
 800086a:	1ad3      	subs	r3, r2, r3
 800086c:	b298      	uxth	r0, r3
 800086e:	8a3a      	ldrh	r2, [r7, #16]
 8000870:	88bb      	ldrh	r3, [r7, #4]
 8000872:	4413      	add	r3, r2
 8000874:	b29b      	uxth	r3, r3
 8000876:	883a      	ldrh	r2, [r7, #0]
 8000878:	4619      	mov	r1, r3
 800087a:	f7ff fe41 	bl	8000500 <ST7789_DrawPixel>
		ST7789_DrawPixel(x0 + y, y0 - x, color);
 800087e:	89fa      	ldrh	r2, [r7, #14]
 8000880:	88fb      	ldrh	r3, [r7, #6]
 8000882:	4413      	add	r3, r2
 8000884:	b298      	uxth	r0, r3
 8000886:	8a3b      	ldrh	r3, [r7, #16]
 8000888:	88ba      	ldrh	r2, [r7, #4]
 800088a:	1ad3      	subs	r3, r2, r3
 800088c:	b29b      	uxth	r3, r3
 800088e:	883a      	ldrh	r2, [r7, #0]
 8000890:	4619      	mov	r1, r3
 8000892:	f7ff fe35 	bl	8000500 <ST7789_DrawPixel>
		ST7789_DrawPixel(x0 - y, y0 - x, color);
 8000896:	89fb      	ldrh	r3, [r7, #14]
 8000898:	88fa      	ldrh	r2, [r7, #6]
 800089a:	1ad3      	subs	r3, r2, r3
 800089c:	b298      	uxth	r0, r3
 800089e:	8a3b      	ldrh	r3, [r7, #16]
 80008a0:	88ba      	ldrh	r2, [r7, #4]
 80008a2:	1ad3      	subs	r3, r2, r3
 80008a4:	b29b      	uxth	r3, r3
 80008a6:	883a      	ldrh	r2, [r7, #0]
 80008a8:	4619      	mov	r1, r3
 80008aa:	f7ff fe29 	bl	8000500 <ST7789_DrawPixel>
	while (x < y) {
 80008ae:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80008b2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80008b6:	429a      	cmp	r2, r3
 80008b8:	f6ff af77 	blt.w	80007aa <ST7789_DrawCircle+0xa2>
	}
	ST7789_UnSelect();
 80008bc:	2201      	movs	r2, #1
 80008be:	2110      	movs	r1, #16
 80008c0:	4803      	ldr	r0, [pc, #12]	; (80008d0 <ST7789_DrawCircle+0x1c8>)
 80008c2:	f001 fafe 	bl	8001ec2 <HAL_GPIO_WritePin>
}
 80008c6:	bf00      	nop
 80008c8:	371c      	adds	r7, #28
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd90      	pop	{r4, r7, pc}
 80008ce:	bf00      	nop
 80008d0:	40010800 	.word	0x40010800

080008d4 <ST7789_DrawImage>:
 * @param w&h -> width & height of the Image to Draw
 * @param data -> pointer of the Image array
 * @return none
 */
void ST7789_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t *data)
{
 80008d4:	b590      	push	{r4, r7, lr}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0
 80008da:	4604      	mov	r4, r0
 80008dc:	4608      	mov	r0, r1
 80008de:	4611      	mov	r1, r2
 80008e0:	461a      	mov	r2, r3
 80008e2:	4623      	mov	r3, r4
 80008e4:	80fb      	strh	r3, [r7, #6]
 80008e6:	4603      	mov	r3, r0
 80008e8:	80bb      	strh	r3, [r7, #4]
 80008ea:	460b      	mov	r3, r1
 80008ec:	807b      	strh	r3, [r7, #2]
 80008ee:	4613      	mov	r3, r2
 80008f0:	803b      	strh	r3, [r7, #0]
	if ((x >= ST7789_WIDTH) || (y >= ST7789_HEIGHT))
 80008f2:	88fb      	ldrh	r3, [r7, #6]
 80008f4:	2bef      	cmp	r3, #239	; 0xef
 80008f6:	d833      	bhi.n	8000960 <ST7789_DrawImage+0x8c>
 80008f8:	88bb      	ldrh	r3, [r7, #4]
 80008fa:	2bef      	cmp	r3, #239	; 0xef
 80008fc:	d830      	bhi.n	8000960 <ST7789_DrawImage+0x8c>
		return;
	if ((x + w - 1) >= ST7789_WIDTH)
 80008fe:	88fa      	ldrh	r2, [r7, #6]
 8000900:	887b      	ldrh	r3, [r7, #2]
 8000902:	4413      	add	r3, r2
 8000904:	3b01      	subs	r3, #1
 8000906:	2bef      	cmp	r3, #239	; 0xef
 8000908:	dc2c      	bgt.n	8000964 <ST7789_DrawImage+0x90>
		return;
	if ((y + h - 1) >= ST7789_HEIGHT)
 800090a:	88ba      	ldrh	r2, [r7, #4]
 800090c:	883b      	ldrh	r3, [r7, #0]
 800090e:	4413      	add	r3, r2
 8000910:	3b01      	subs	r3, #1
 8000912:	2bef      	cmp	r3, #239	; 0xef
 8000914:	dc28      	bgt.n	8000968 <ST7789_DrawImage+0x94>
		return;

	ST7789_Select();
 8000916:	2200      	movs	r2, #0
 8000918:	2110      	movs	r1, #16
 800091a:	4815      	ldr	r0, [pc, #84]	; (8000970 <ST7789_DrawImage+0x9c>)
 800091c:	f001 fad1 	bl	8001ec2 <HAL_GPIO_WritePin>
	ST7789_SetAddressWindow(x, y, x + w - 1, y + h - 1);
 8000920:	88fa      	ldrh	r2, [r7, #6]
 8000922:	887b      	ldrh	r3, [r7, #2]
 8000924:	4413      	add	r3, r2
 8000926:	b29b      	uxth	r3, r3
 8000928:	3b01      	subs	r3, #1
 800092a:	b29c      	uxth	r4, r3
 800092c:	88ba      	ldrh	r2, [r7, #4]
 800092e:	883b      	ldrh	r3, [r7, #0]
 8000930:	4413      	add	r3, r2
 8000932:	b29b      	uxth	r3, r3
 8000934:	3b01      	subs	r3, #1
 8000936:	b29b      	uxth	r3, r3
 8000938:	88b9      	ldrh	r1, [r7, #4]
 800093a:	88f8      	ldrh	r0, [r7, #6]
 800093c:	4622      	mov	r2, r4
 800093e:	f7ff fcb5 	bl	80002ac <ST7789_SetAddressWindow>
	ST7789_WriteData((uint8_t *)data, sizeof(uint16_t) * w * h);
 8000942:	887b      	ldrh	r3, [r7, #2]
 8000944:	883a      	ldrh	r2, [r7, #0]
 8000946:	fb02 f303 	mul.w	r3, r2, r3
 800094a:	005b      	lsls	r3, r3, #1
 800094c:	4619      	mov	r1, r3
 800094e:	69b8      	ldr	r0, [r7, #24]
 8000950:	f7ff fc22 	bl	8000198 <ST7789_WriteData>
	ST7789_UnSelect();
 8000954:	2201      	movs	r2, #1
 8000956:	2110      	movs	r1, #16
 8000958:	4805      	ldr	r0, [pc, #20]	; (8000970 <ST7789_DrawImage+0x9c>)
 800095a:	f001 fab2 	bl	8001ec2 <HAL_GPIO_WritePin>
 800095e:	e004      	b.n	800096a <ST7789_DrawImage+0x96>
		return;
 8000960:	bf00      	nop
 8000962:	e002      	b.n	800096a <ST7789_DrawImage+0x96>
		return;
 8000964:	bf00      	nop
 8000966:	e000      	b.n	800096a <ST7789_DrawImage+0x96>
		return;
 8000968:	bf00      	nop
}
 800096a:	370c      	adds	r7, #12
 800096c:	46bd      	mov	sp, r7
 800096e:	bd90      	pop	{r4, r7, pc}
 8000970:	40010800 	.word	0x40010800

08000974 <ST7789_WriteChar>:
 * @param color -> color of the char
 * @param bgcolor -> background color of the char
 * @return  none
 */
void ST7789_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8000974:	b082      	sub	sp, #8
 8000976:	b590      	push	{r4, r7, lr}
 8000978:	b089      	sub	sp, #36	; 0x24
 800097a:	af00      	add	r7, sp, #0
 800097c:	637b      	str	r3, [r7, #52]	; 0x34
 800097e:	4603      	mov	r3, r0
 8000980:	80fb      	strh	r3, [r7, #6]
 8000982:	460b      	mov	r3, r1
 8000984:	80bb      	strh	r3, [r7, #4]
 8000986:	4613      	mov	r3, r2
 8000988:	70fb      	strb	r3, [r7, #3]
	uint32_t i, b, j;
	ST7789_Select();
 800098a:	2200      	movs	r2, #0
 800098c:	2110      	movs	r1, #16
 800098e:	4838      	ldr	r0, [pc, #224]	; (8000a70 <ST7789_WriteChar+0xfc>)
 8000990:	f001 fa97 	bl	8001ec2 <HAL_GPIO_WritePin>
	ST7789_SetAddressWindow(x, y, x + font.width - 1, y + font.height - 1);
 8000994:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000998:	b29a      	uxth	r2, r3
 800099a:	88fb      	ldrh	r3, [r7, #6]
 800099c:	4413      	add	r3, r2
 800099e:	b29b      	uxth	r3, r3
 80009a0:	3b01      	subs	r3, #1
 80009a2:	b29c      	uxth	r4, r3
 80009a4:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80009a8:	b29a      	uxth	r2, r3
 80009aa:	88bb      	ldrh	r3, [r7, #4]
 80009ac:	4413      	add	r3, r2
 80009ae:	b29b      	uxth	r3, r3
 80009b0:	3b01      	subs	r3, #1
 80009b2:	b29b      	uxth	r3, r3
 80009b4:	88b9      	ldrh	r1, [r7, #4]
 80009b6:	88f8      	ldrh	r0, [r7, #6]
 80009b8:	4622      	mov	r2, r4
 80009ba:	f7ff fc77 	bl	80002ac <ST7789_SetAddressWindow>

	for (i = 0; i < font.height; i++) {
 80009be:	2300      	movs	r3, #0
 80009c0:	61fb      	str	r3, [r7, #28]
 80009c2:	e043      	b.n	8000a4c <ST7789_WriteChar+0xd8>
		b = font.data[(ch - 32) * font.height + i];
 80009c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80009c6:	78fb      	ldrb	r3, [r7, #3]
 80009c8:	3b20      	subs	r3, #32
 80009ca:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 80009ce:	fb01 f303 	mul.w	r3, r1, r3
 80009d2:	4619      	mov	r1, r3
 80009d4:	69fb      	ldr	r3, [r7, #28]
 80009d6:	440b      	add	r3, r1
 80009d8:	005b      	lsls	r3, r3, #1
 80009da:	4413      	add	r3, r2
 80009dc:	881b      	ldrh	r3, [r3, #0]
 80009de:	617b      	str	r3, [r7, #20]
		for (j = 0; j < font.width; j++) {
 80009e0:	2300      	movs	r3, #0
 80009e2:	61bb      	str	r3, [r7, #24]
 80009e4:	e029      	b.n	8000a3a <ST7789_WriteChar+0xc6>
			if ((b << j) & 0x8000) {
 80009e6:	697a      	ldr	r2, [r7, #20]
 80009e8:	69bb      	ldr	r3, [r7, #24]
 80009ea:	fa02 f303 	lsl.w	r3, r2, r3
 80009ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d00e      	beq.n	8000a14 <ST7789_WriteChar+0xa0>
				uint8_t data[] = {color >> 8, color & 0xFF};
 80009f6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80009f8:	0a1b      	lsrs	r3, r3, #8
 80009fa:	b29b      	uxth	r3, r3
 80009fc:	b2db      	uxtb	r3, r3
 80009fe:	743b      	strb	r3, [r7, #16]
 8000a00:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000a02:	b2db      	uxtb	r3, r3
 8000a04:	747b      	strb	r3, [r7, #17]
				ST7789_WriteData(data, sizeof(data));
 8000a06:	f107 0310 	add.w	r3, r7, #16
 8000a0a:	2102      	movs	r1, #2
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f7ff fbc3 	bl	8000198 <ST7789_WriteData>
 8000a12:	e00f      	b.n	8000a34 <ST7789_WriteChar+0xc0>
			}
			else {
				uint8_t data[] = {bgcolor >> 8, bgcolor & 0xFF};
 8000a14:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000a18:	0a1b      	lsrs	r3, r3, #8
 8000a1a:	b29b      	uxth	r3, r3
 8000a1c:	b2db      	uxtb	r3, r3
 8000a1e:	733b      	strb	r3, [r7, #12]
 8000a20:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000a24:	b2db      	uxtb	r3, r3
 8000a26:	737b      	strb	r3, [r7, #13]
				ST7789_WriteData(data, sizeof(data));
 8000a28:	f107 030c 	add.w	r3, r7, #12
 8000a2c:	2102      	movs	r1, #2
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f7ff fbb2 	bl	8000198 <ST7789_WriteData>
		for (j = 0; j < font.width; j++) {
 8000a34:	69bb      	ldr	r3, [r7, #24]
 8000a36:	3301      	adds	r3, #1
 8000a38:	61bb      	str	r3, [r7, #24]
 8000a3a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000a3e:	461a      	mov	r2, r3
 8000a40:	69bb      	ldr	r3, [r7, #24]
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d3cf      	bcc.n	80009e6 <ST7789_WriteChar+0x72>
	for (i = 0; i < font.height; i++) {
 8000a46:	69fb      	ldr	r3, [r7, #28]
 8000a48:	3301      	adds	r3, #1
 8000a4a:	61fb      	str	r3, [r7, #28]
 8000a4c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000a50:	461a      	mov	r2, r3
 8000a52:	69fb      	ldr	r3, [r7, #28]
 8000a54:	4293      	cmp	r3, r2
 8000a56:	d3b5      	bcc.n	80009c4 <ST7789_WriteChar+0x50>
			}
		}
	}
	ST7789_UnSelect();
 8000a58:	2201      	movs	r2, #1
 8000a5a:	2110      	movs	r1, #16
 8000a5c:	4804      	ldr	r0, [pc, #16]	; (8000a70 <ST7789_WriteChar+0xfc>)
 8000a5e:	f001 fa30 	bl	8001ec2 <HAL_GPIO_WritePin>
}
 8000a62:	bf00      	nop
 8000a64:	3724      	adds	r7, #36	; 0x24
 8000a66:	46bd      	mov	sp, r7
 8000a68:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000a6c:	b002      	add	sp, #8
 8000a6e:	4770      	bx	lr
 8000a70:	40010800 	.word	0x40010800

08000a74 <ST7789_WriteString>:
 * @param color -> color of the string
 * @param bgcolor -> background color of the string
 * @return  none
 */
void ST7789_WriteString(uint16_t x, uint16_t y, const char *str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8000a74:	b082      	sub	sp, #8
 8000a76:	b580      	push	{r7, lr}
 8000a78:	b086      	sub	sp, #24
 8000a7a:	af04      	add	r7, sp, #16
 8000a7c:	603a      	str	r2, [r7, #0]
 8000a7e:	617b      	str	r3, [r7, #20]
 8000a80:	4603      	mov	r3, r0
 8000a82:	80fb      	strh	r3, [r7, #6]
 8000a84:	460b      	mov	r3, r1
 8000a86:	80bb      	strh	r3, [r7, #4]
	ST7789_Select();
 8000a88:	2200      	movs	r2, #0
 8000a8a:	2110      	movs	r1, #16
 8000a8c:	4821      	ldr	r0, [pc, #132]	; (8000b14 <ST7789_WriteString+0xa0>)
 8000a8e:	f001 fa18 	bl	8001ec2 <HAL_GPIO_WritePin>
	while (*str) {
 8000a92:	e02d      	b.n	8000af0 <ST7789_WriteString+0x7c>
		if (x + font.width >= ST7789_WIDTH) {
 8000a94:	88fb      	ldrh	r3, [r7, #6]
 8000a96:	7d3a      	ldrb	r2, [r7, #20]
 8000a98:	4413      	add	r3, r2
 8000a9a:	2bef      	cmp	r3, #239	; 0xef
 8000a9c:	dd13      	ble.n	8000ac6 <ST7789_WriteString+0x52>
			x = 0;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 8000aa2:	7d7b      	ldrb	r3, [r7, #21]
 8000aa4:	b29a      	uxth	r2, r3
 8000aa6:	88bb      	ldrh	r3, [r7, #4]
 8000aa8:	4413      	add	r3, r2
 8000aaa:	80bb      	strh	r3, [r7, #4]
			if (y + font.height >= ST7789_HEIGHT) {
 8000aac:	88bb      	ldrh	r3, [r7, #4]
 8000aae:	7d7a      	ldrb	r2, [r7, #21]
 8000ab0:	4413      	add	r3, r2
 8000ab2:	2bef      	cmp	r3, #239	; 0xef
 8000ab4:	dc21      	bgt.n	8000afa <ST7789_WriteString+0x86>
				break;
			}

			if (*str == ' ') {
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	2b20      	cmp	r3, #32
 8000abc:	d103      	bne.n	8000ac6 <ST7789_WriteString+0x52>
				// skip spaces in the beginning of the new line
				str++;
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	3301      	adds	r3, #1
 8000ac2:	603b      	str	r3, [r7, #0]
				continue;
 8000ac4:	e014      	b.n	8000af0 <ST7789_WriteString+0x7c>
			}
		}
		ST7789_WriteChar(x, y, *str, font, color, bgcolor);
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	781a      	ldrb	r2, [r3, #0]
 8000aca:	88b9      	ldrh	r1, [r7, #4]
 8000acc:	88f8      	ldrh	r0, [r7, #6]
 8000ace:	8c3b      	ldrh	r3, [r7, #32]
 8000ad0:	9302      	str	r3, [sp, #8]
 8000ad2:	8bbb      	ldrh	r3, [r7, #28]
 8000ad4:	9301      	str	r3, [sp, #4]
 8000ad6:	69bb      	ldr	r3, [r7, #24]
 8000ad8:	9300      	str	r3, [sp, #0]
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	f7ff ff4a 	bl	8000974 <ST7789_WriteChar>
		x += font.width;
 8000ae0:	7d3b      	ldrb	r3, [r7, #20]
 8000ae2:	b29a      	uxth	r2, r3
 8000ae4:	88fb      	ldrh	r3, [r7, #6]
 8000ae6:	4413      	add	r3, r2
 8000ae8:	80fb      	strh	r3, [r7, #6]
		str++;
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	3301      	adds	r3, #1
 8000aee:	603b      	str	r3, [r7, #0]
	while (*str) {
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d1cd      	bne.n	8000a94 <ST7789_WriteString+0x20>
 8000af8:	e000      	b.n	8000afc <ST7789_WriteString+0x88>
				break;
 8000afa:	bf00      	nop
	}
	ST7789_UnSelect();
 8000afc:	2201      	movs	r2, #1
 8000afe:	2110      	movs	r1, #16
 8000b00:	4804      	ldr	r0, [pc, #16]	; (8000b14 <ST7789_WriteString+0xa0>)
 8000b02:	f001 f9de 	bl	8001ec2 <HAL_GPIO_WritePin>
}
 8000b06:	bf00      	nop
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000b10:	b002      	add	sp, #8
 8000b12:	4770      	bx	lr
 8000b14:	40010800 	.word	0x40010800

08000b18 <ST7789_DrawFilledRectangle>:
 * @param w&h -> width & height of the Rectangle
 * @param color -> color of the Rectangle
 * @return  none
 */
void ST7789_DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8000b18:	b590      	push	{r4, r7, lr}
 8000b1a:	b087      	sub	sp, #28
 8000b1c:	af02      	add	r7, sp, #8
 8000b1e:	4604      	mov	r4, r0
 8000b20:	4608      	mov	r0, r1
 8000b22:	4611      	mov	r1, r2
 8000b24:	461a      	mov	r2, r3
 8000b26:	4623      	mov	r3, r4
 8000b28:	80fb      	strh	r3, [r7, #6]
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	80bb      	strh	r3, [r7, #4]
 8000b2e:	460b      	mov	r3, r1
 8000b30:	807b      	strh	r3, [r7, #2]
 8000b32:	4613      	mov	r3, r2
 8000b34:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 8000b36:	2200      	movs	r2, #0
 8000b38:	2110      	movs	r1, #16
 8000b3a:	4822      	ldr	r0, [pc, #136]	; (8000bc4 <ST7789_DrawFilledRectangle+0xac>)
 8000b3c:	f001 f9c1 	bl	8001ec2 <HAL_GPIO_WritePin>
	uint8_t i;

	/* Check input parameters */
	if (x >= ST7789_WIDTH ||
 8000b40:	88fb      	ldrh	r3, [r7, #6]
 8000b42:	2bef      	cmp	r3, #239	; 0xef
 8000b44:	d83a      	bhi.n	8000bbc <ST7789_DrawFilledRectangle+0xa4>
 8000b46:	88bb      	ldrh	r3, [r7, #4]
 8000b48:	2bef      	cmp	r3, #239	; 0xef
 8000b4a:	d837      	bhi.n	8000bbc <ST7789_DrawFilledRectangle+0xa4>
		/* Return error */
		return;
	}

	/* Check width and height */
	if ((x + w) >= ST7789_WIDTH) {
 8000b4c:	88fa      	ldrh	r2, [r7, #6]
 8000b4e:	887b      	ldrh	r3, [r7, #2]
 8000b50:	4413      	add	r3, r2
 8000b52:	2bef      	cmp	r3, #239	; 0xef
 8000b54:	dd03      	ble.n	8000b5e <ST7789_DrawFilledRectangle+0x46>
		w = ST7789_WIDTH - x;
 8000b56:	88fb      	ldrh	r3, [r7, #6]
 8000b58:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8000b5c:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= ST7789_HEIGHT) {
 8000b5e:	88ba      	ldrh	r2, [r7, #4]
 8000b60:	883b      	ldrh	r3, [r7, #0]
 8000b62:	4413      	add	r3, r2
 8000b64:	2bef      	cmp	r3, #239	; 0xef
 8000b66:	dd03      	ble.n	8000b70 <ST7789_DrawFilledRectangle+0x58>
		h = ST7789_HEIGHT - y;
 8000b68:	88bb      	ldrh	r3, [r7, #4]
 8000b6a:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8000b6e:	803b      	strh	r3, [r7, #0]
	}

	/* Draw lines */
	for (i = 0; i <= h; i++) {
 8000b70:	2300      	movs	r3, #0
 8000b72:	73fb      	strb	r3, [r7, #15]
 8000b74:	e017      	b.n	8000ba6 <ST7789_DrawFilledRectangle+0x8e>
		/* Draw lines */
		ST7789_DrawLine(x, y + i, x + w, y + i, color);
 8000b76:	7bfb      	ldrb	r3, [r7, #15]
 8000b78:	b29a      	uxth	r2, r3
 8000b7a:	88bb      	ldrh	r3, [r7, #4]
 8000b7c:	4413      	add	r3, r2
 8000b7e:	b299      	uxth	r1, r3
 8000b80:	88fa      	ldrh	r2, [r7, #6]
 8000b82:	887b      	ldrh	r3, [r7, #2]
 8000b84:	4413      	add	r3, r2
 8000b86:	b29c      	uxth	r4, r3
 8000b88:	7bfb      	ldrb	r3, [r7, #15]
 8000b8a:	b29a      	uxth	r2, r3
 8000b8c:	88bb      	ldrh	r3, [r7, #4]
 8000b8e:	4413      	add	r3, r2
 8000b90:	b29a      	uxth	r2, r3
 8000b92:	88f8      	ldrh	r0, [r7, #6]
 8000b94:	8c3b      	ldrh	r3, [r7, #32]
 8000b96:	9300      	str	r3, [sp, #0]
 8000b98:	4613      	mov	r3, r2
 8000b9a:	4622      	mov	r2, r4
 8000b9c:	f7ff fce4 	bl	8000568 <ST7789_DrawLine>
	for (i = 0; i <= h; i++) {
 8000ba0:	7bfb      	ldrb	r3, [r7, #15]
 8000ba2:	3301      	adds	r3, #1
 8000ba4:	73fb      	strb	r3, [r7, #15]
 8000ba6:	7bfb      	ldrb	r3, [r7, #15]
 8000ba8:	b29b      	uxth	r3, r3
 8000baa:	883a      	ldrh	r2, [r7, #0]
 8000bac:	429a      	cmp	r2, r3
 8000bae:	d2e2      	bcs.n	8000b76 <ST7789_DrawFilledRectangle+0x5e>
	}
	ST7789_UnSelect();
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	2110      	movs	r1, #16
 8000bb4:	4803      	ldr	r0, [pc, #12]	; (8000bc4 <ST7789_DrawFilledRectangle+0xac>)
 8000bb6:	f001 f984 	bl	8001ec2 <HAL_GPIO_WritePin>
 8000bba:	e000      	b.n	8000bbe <ST7789_DrawFilledRectangle+0xa6>
		return;
 8000bbc:	bf00      	nop
}
 8000bbe:	3714      	adds	r7, #20
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd90      	pop	{r4, r7, pc}
 8000bc4:	40010800 	.word	0x40010800

08000bc8 <ST7789_DrawTriangle>:
 * @param  xi&yi -> 3 coordinates of 3 top points.
 * @param color ->color of the lines
 * @return  none
 */
void ST7789_DrawTriangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t x3, uint16_t y3, uint16_t color)
{
 8000bc8:	b590      	push	{r4, r7, lr}
 8000bca:	b085      	sub	sp, #20
 8000bcc:	af02      	add	r7, sp, #8
 8000bce:	4604      	mov	r4, r0
 8000bd0:	4608      	mov	r0, r1
 8000bd2:	4611      	mov	r1, r2
 8000bd4:	461a      	mov	r2, r3
 8000bd6:	4623      	mov	r3, r4
 8000bd8:	80fb      	strh	r3, [r7, #6]
 8000bda:	4603      	mov	r3, r0
 8000bdc:	80bb      	strh	r3, [r7, #4]
 8000bde:	460b      	mov	r3, r1
 8000be0:	807b      	strh	r3, [r7, #2]
 8000be2:	4613      	mov	r3, r2
 8000be4:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 8000be6:	2200      	movs	r2, #0
 8000be8:	2110      	movs	r1, #16
 8000bea:	4813      	ldr	r0, [pc, #76]	; (8000c38 <ST7789_DrawTriangle+0x70>)
 8000bec:	f001 f969 	bl	8001ec2 <HAL_GPIO_WritePin>
	/* Draw lines */
	ST7789_DrawLine(x1, y1, x2, y2, color);
 8000bf0:	883c      	ldrh	r4, [r7, #0]
 8000bf2:	887a      	ldrh	r2, [r7, #2]
 8000bf4:	88b9      	ldrh	r1, [r7, #4]
 8000bf6:	88f8      	ldrh	r0, [r7, #6]
 8000bf8:	8c3b      	ldrh	r3, [r7, #32]
 8000bfa:	9300      	str	r3, [sp, #0]
 8000bfc:	4623      	mov	r3, r4
 8000bfe:	f7ff fcb3 	bl	8000568 <ST7789_DrawLine>
	ST7789_DrawLine(x2, y2, x3, y3, color);
 8000c02:	8bbc      	ldrh	r4, [r7, #28]
 8000c04:	8b3a      	ldrh	r2, [r7, #24]
 8000c06:	8839      	ldrh	r1, [r7, #0]
 8000c08:	8878      	ldrh	r0, [r7, #2]
 8000c0a:	8c3b      	ldrh	r3, [r7, #32]
 8000c0c:	9300      	str	r3, [sp, #0]
 8000c0e:	4623      	mov	r3, r4
 8000c10:	f7ff fcaa 	bl	8000568 <ST7789_DrawLine>
	ST7789_DrawLine(x3, y3, x1, y1, color);
 8000c14:	88bc      	ldrh	r4, [r7, #4]
 8000c16:	88fa      	ldrh	r2, [r7, #6]
 8000c18:	8bb9      	ldrh	r1, [r7, #28]
 8000c1a:	8b38      	ldrh	r0, [r7, #24]
 8000c1c:	8c3b      	ldrh	r3, [r7, #32]
 8000c1e:	9300      	str	r3, [sp, #0]
 8000c20:	4623      	mov	r3, r4
 8000c22:	f7ff fca1 	bl	8000568 <ST7789_DrawLine>
	ST7789_UnSelect();
 8000c26:	2201      	movs	r2, #1
 8000c28:	2110      	movs	r1, #16
 8000c2a:	4803      	ldr	r0, [pc, #12]	; (8000c38 <ST7789_DrawTriangle+0x70>)
 8000c2c:	f001 f949 	bl	8001ec2 <HAL_GPIO_WritePin>
}
 8000c30:	bf00      	nop
 8000c32:	370c      	adds	r7, #12
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd90      	pop	{r4, r7, pc}
 8000c38:	40010800 	.word	0x40010800

08000c3c <ST7789_DrawFilledTriangle>:
 * @param  xi&yi -> 3 coordinates of 3 top points.
 * @param color ->color of the triangle
 * @return  none
 */
void ST7789_DrawFilledTriangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t x3, uint16_t y3, uint16_t color)
{
 8000c3c:	b590      	push	{r4, r7, lr}
 8000c3e:	b08d      	sub	sp, #52	; 0x34
 8000c40:	af02      	add	r7, sp, #8
 8000c42:	4604      	mov	r4, r0
 8000c44:	4608      	mov	r0, r1
 8000c46:	4611      	mov	r1, r2
 8000c48:	461a      	mov	r2, r3
 8000c4a:	4623      	mov	r3, r4
 8000c4c:	80fb      	strh	r3, [r7, #6]
 8000c4e:	4603      	mov	r3, r0
 8000c50:	80bb      	strh	r3, [r7, #4]
 8000c52:	460b      	mov	r3, r1
 8000c54:	807b      	strh	r3, [r7, #2]
 8000c56:	4613      	mov	r3, r2
 8000c58:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	2110      	movs	r1, #16
 8000c5e:	485d      	ldr	r0, [pc, #372]	; (8000dd4 <ST7789_DrawFilledTriangle+0x198>)
 8000c60:	f001 f92f 	bl	8001ec2 <HAL_GPIO_WritePin>
	int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0,
 8000c64:	2300      	movs	r3, #0
 8000c66:	823b      	strh	r3, [r7, #16]
 8000c68:	2300      	movs	r3, #0
 8000c6a:	81fb      	strh	r3, [r7, #14]
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000c70:	2300      	movs	r3, #0
 8000c72:	84bb      	strh	r3, [r7, #36]	; 0x24
 8000c74:	2300      	movs	r3, #0
 8000c76:	847b      	strh	r3, [r7, #34]	; 0x22
 8000c78:	2300      	movs	r3, #0
 8000c7a:	843b      	strh	r3, [r7, #32]
			yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0,
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	83fb      	strh	r3, [r7, #30]
 8000c80:	2300      	movs	r3, #0
 8000c82:	83bb      	strh	r3, [r7, #28]
 8000c84:	2300      	movs	r3, #0
 8000c86:	837b      	strh	r3, [r7, #26]
 8000c88:	2300      	movs	r3, #0
 8000c8a:	833b      	strh	r3, [r7, #24]
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	82fb      	strh	r3, [r7, #22]
 8000c90:	2300      	movs	r3, #0
 8000c92:	82bb      	strh	r3, [r7, #20]
			curpixel = 0;
 8000c94:	2300      	movs	r3, #0
 8000c96:	827b      	strh	r3, [r7, #18]

	deltax = ABS(x2 - x1);
 8000c98:	887a      	ldrh	r2, [r7, #2]
 8000c9a:	88fb      	ldrh	r3, [r7, #6]
 8000c9c:	1ad3      	subs	r3, r2, r3
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	bfb8      	it	lt
 8000ca2:	425b      	neglt	r3, r3
 8000ca4:	823b      	strh	r3, [r7, #16]
	deltay = ABS(y2 - y1);
 8000ca6:	883a      	ldrh	r2, [r7, #0]
 8000ca8:	88bb      	ldrh	r3, [r7, #4]
 8000caa:	1ad3      	subs	r3, r2, r3
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	bfb8      	it	lt
 8000cb0:	425b      	neglt	r3, r3
 8000cb2:	81fb      	strh	r3, [r7, #14]
	x = x1;
 8000cb4:	88fb      	ldrh	r3, [r7, #6]
 8000cb6:	84fb      	strh	r3, [r7, #38]	; 0x26
	y = y1;
 8000cb8:	88bb      	ldrh	r3, [r7, #4]
 8000cba:	84bb      	strh	r3, [r7, #36]	; 0x24

	if (x2 >= x1) {
 8000cbc:	887a      	ldrh	r2, [r7, #2]
 8000cbe:	88fb      	ldrh	r3, [r7, #6]
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	d304      	bcc.n	8000cce <ST7789_DrawFilledTriangle+0x92>
		xinc1 = 1;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	847b      	strh	r3, [r7, #34]	; 0x22
		xinc2 = 1;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	843b      	strh	r3, [r7, #32]
 8000ccc:	e005      	b.n	8000cda <ST7789_DrawFilledTriangle+0x9e>
	}
	else {
		xinc1 = -1;
 8000cce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000cd2:	847b      	strh	r3, [r7, #34]	; 0x22
		xinc2 = -1;
 8000cd4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000cd8:	843b      	strh	r3, [r7, #32]
	}

	if (y2 >= y1) {
 8000cda:	883a      	ldrh	r2, [r7, #0]
 8000cdc:	88bb      	ldrh	r3, [r7, #4]
 8000cde:	429a      	cmp	r2, r3
 8000ce0:	d304      	bcc.n	8000cec <ST7789_DrawFilledTriangle+0xb0>
		yinc1 = 1;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	83fb      	strh	r3, [r7, #30]
		yinc2 = 1;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	83bb      	strh	r3, [r7, #28]
 8000cea:	e005      	b.n	8000cf8 <ST7789_DrawFilledTriangle+0xbc>
	}
	else {
		yinc1 = -1;
 8000cec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000cf0:	83fb      	strh	r3, [r7, #30]
		yinc2 = -1;
 8000cf2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000cf6:	83bb      	strh	r3, [r7, #28]
	}

	if (deltax >= deltay) {
 8000cf8:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000cfc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d00:	429a      	cmp	r2, r3
 8000d02:	db10      	blt.n	8000d26 <ST7789_DrawFilledTriangle+0xea>
		xinc1 = 0;
 8000d04:	2300      	movs	r3, #0
 8000d06:	847b      	strh	r3, [r7, #34]	; 0x22
		yinc2 = 0;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	83bb      	strh	r3, [r7, #28]
		den = deltax;
 8000d0c:	8a3b      	ldrh	r3, [r7, #16]
 8000d0e:	837b      	strh	r3, [r7, #26]
		num = deltax / 2;
 8000d10:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000d14:	0fda      	lsrs	r2, r3, #31
 8000d16:	4413      	add	r3, r2
 8000d18:	105b      	asrs	r3, r3, #1
 8000d1a:	833b      	strh	r3, [r7, #24]
		numadd = deltay;
 8000d1c:	89fb      	ldrh	r3, [r7, #14]
 8000d1e:	82fb      	strh	r3, [r7, #22]
		numpixels = deltax;
 8000d20:	8a3b      	ldrh	r3, [r7, #16]
 8000d22:	82bb      	strh	r3, [r7, #20]
 8000d24:	e00f      	b.n	8000d46 <ST7789_DrawFilledTriangle+0x10a>
	}
	else {
		xinc2 = 0;
 8000d26:	2300      	movs	r3, #0
 8000d28:	843b      	strh	r3, [r7, #32]
		yinc1 = 0;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	83fb      	strh	r3, [r7, #30]
		den = deltay;
 8000d2e:	89fb      	ldrh	r3, [r7, #14]
 8000d30:	837b      	strh	r3, [r7, #26]
		num = deltay / 2;
 8000d32:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d36:	0fda      	lsrs	r2, r3, #31
 8000d38:	4413      	add	r3, r2
 8000d3a:	105b      	asrs	r3, r3, #1
 8000d3c:	833b      	strh	r3, [r7, #24]
		numadd = deltax;
 8000d3e:	8a3b      	ldrh	r3, [r7, #16]
 8000d40:	82fb      	strh	r3, [r7, #22]
		numpixels = deltay;
 8000d42:	89fb      	ldrh	r3, [r7, #14]
 8000d44:	82bb      	strh	r3, [r7, #20]
	}

	for (curpixel = 0; curpixel <= numpixels; curpixel++) {
 8000d46:	2300      	movs	r3, #0
 8000d48:	827b      	strh	r3, [r7, #18]
 8000d4a:	e033      	b.n	8000db4 <ST7789_DrawFilledTriangle+0x178>
		ST7789_DrawLine(x, y, x3, y3, color);
 8000d4c:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8000d4e:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8000d50:	8fbc      	ldrh	r4, [r7, #60]	; 0x3c
 8000d52:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8000d54:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000d58:	9300      	str	r3, [sp, #0]
 8000d5a:	4623      	mov	r3, r4
 8000d5c:	f7ff fc04 	bl	8000568 <ST7789_DrawLine>

		num += numadd;
 8000d60:	8b3a      	ldrh	r2, [r7, #24]
 8000d62:	8afb      	ldrh	r3, [r7, #22]
 8000d64:	4413      	add	r3, r2
 8000d66:	b29b      	uxth	r3, r3
 8000d68:	833b      	strh	r3, [r7, #24]
		if (num >= den) {
 8000d6a:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8000d6e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000d72:	429a      	cmp	r2, r3
 8000d74:	db0e      	blt.n	8000d94 <ST7789_DrawFilledTriangle+0x158>
			num -= den;
 8000d76:	8b3a      	ldrh	r2, [r7, #24]
 8000d78:	8b7b      	ldrh	r3, [r7, #26]
 8000d7a:	1ad3      	subs	r3, r2, r3
 8000d7c:	b29b      	uxth	r3, r3
 8000d7e:	833b      	strh	r3, [r7, #24]
			x += xinc1;
 8000d80:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000d82:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000d84:	4413      	add	r3, r2
 8000d86:	b29b      	uxth	r3, r3
 8000d88:	84fb      	strh	r3, [r7, #38]	; 0x26
			y += yinc1;
 8000d8a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000d8c:	8bfb      	ldrh	r3, [r7, #30]
 8000d8e:	4413      	add	r3, r2
 8000d90:	b29b      	uxth	r3, r3
 8000d92:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		x += xinc2;
 8000d94:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000d96:	8c3b      	ldrh	r3, [r7, #32]
 8000d98:	4413      	add	r3, r2
 8000d9a:	b29b      	uxth	r3, r3
 8000d9c:	84fb      	strh	r3, [r7, #38]	; 0x26
		y += yinc2;
 8000d9e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000da0:	8bbb      	ldrh	r3, [r7, #28]
 8000da2:	4413      	add	r3, r2
 8000da4:	b29b      	uxth	r3, r3
 8000da6:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (curpixel = 0; curpixel <= numpixels; curpixel++) {
 8000da8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000dac:	b29b      	uxth	r3, r3
 8000dae:	3301      	adds	r3, #1
 8000db0:	b29b      	uxth	r3, r3
 8000db2:	827b      	strh	r3, [r7, #18]
 8000db4:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8000db8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	ddc5      	ble.n	8000d4c <ST7789_DrawFilledTriangle+0x110>
	}
	ST7789_UnSelect();
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	2110      	movs	r1, #16
 8000dc4:	4803      	ldr	r0, [pc, #12]	; (8000dd4 <ST7789_DrawFilledTriangle+0x198>)
 8000dc6:	f001 f87c 	bl	8001ec2 <HAL_GPIO_WritePin>
}
 8000dca:	bf00      	nop
 8000dcc:	372c      	adds	r7, #44	; 0x2c
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd90      	pop	{r4, r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	40010800 	.word	0x40010800

08000dd8 <ST7789_DrawFilledCircle>:
 * @param r -> radius of circle
 * @param color -> color of circle
 * @return  none
 */
void ST7789_DrawFilledCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 8000dd8:	b590      	push	{r4, r7, lr}
 8000dda:	b089      	sub	sp, #36	; 0x24
 8000ddc:	af02      	add	r7, sp, #8
 8000dde:	4604      	mov	r4, r0
 8000de0:	4608      	mov	r0, r1
 8000de2:	4611      	mov	r1, r2
 8000de4:	461a      	mov	r2, r3
 8000de6:	4623      	mov	r3, r4
 8000de8:	80fb      	strh	r3, [r7, #6]
 8000dea:	4603      	mov	r3, r0
 8000dec:	80bb      	strh	r3, [r7, #4]
 8000dee:	460b      	mov	r3, r1
 8000df0:	807b      	strh	r3, [r7, #2]
 8000df2:	4613      	mov	r3, r2
 8000df4:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 8000df6:	2200      	movs	r2, #0
 8000df8:	2110      	movs	r1, #16
 8000dfa:	4869      	ldr	r0, [pc, #420]	; (8000fa0 <ST7789_DrawFilledCircle+0x1c8>)
 8000dfc:	f001 f861 	bl	8001ec2 <HAL_GPIO_WritePin>
	int16_t f = 1 - r;
 8000e00:	887b      	ldrh	r3, [r7, #2]
 8000e02:	f1c3 0301 	rsb	r3, r3, #1
 8000e06:	b29b      	uxth	r3, r3
 8000e08:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 8000e0e:	887b      	ldrh	r3, [r7, #2]
 8000e10:	461a      	mov	r2, r3
 8000e12:	03d2      	lsls	r2, r2, #15
 8000e14:	1ad3      	subs	r3, r2, r3
 8000e16:	005b      	lsls	r3, r3, #1
 8000e18:	b29b      	uxth	r3, r3
 8000e1a:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 8000e20:	887b      	ldrh	r3, [r7, #2]
 8000e22:	81fb      	strh	r3, [r7, #14]

	ST7789_DrawPixel(x0, y0 + r, color);
 8000e24:	88f8      	ldrh	r0, [r7, #6]
 8000e26:	88ba      	ldrh	r2, [r7, #4]
 8000e28:	887b      	ldrh	r3, [r7, #2]
 8000e2a:	4413      	add	r3, r2
 8000e2c:	b29b      	uxth	r3, r3
 8000e2e:	883a      	ldrh	r2, [r7, #0]
 8000e30:	4619      	mov	r1, r3
 8000e32:	f7ff fb65 	bl	8000500 <ST7789_DrawPixel>
	ST7789_DrawPixel(x0, y0 - r, color);
 8000e36:	88f8      	ldrh	r0, [r7, #6]
 8000e38:	88ba      	ldrh	r2, [r7, #4]
 8000e3a:	887b      	ldrh	r3, [r7, #2]
 8000e3c:	1ad3      	subs	r3, r2, r3
 8000e3e:	b29b      	uxth	r3, r3
 8000e40:	883a      	ldrh	r2, [r7, #0]
 8000e42:	4619      	mov	r1, r3
 8000e44:	f7ff fb5c 	bl	8000500 <ST7789_DrawPixel>
	ST7789_DrawPixel(x0 + r, y0, color);
 8000e48:	88fa      	ldrh	r2, [r7, #6]
 8000e4a:	887b      	ldrh	r3, [r7, #2]
 8000e4c:	4413      	add	r3, r2
 8000e4e:	b29b      	uxth	r3, r3
 8000e50:	88b9      	ldrh	r1, [r7, #4]
 8000e52:	883a      	ldrh	r2, [r7, #0]
 8000e54:	4618      	mov	r0, r3
 8000e56:	f7ff fb53 	bl	8000500 <ST7789_DrawPixel>
	ST7789_DrawPixel(x0 - r, y0, color);
 8000e5a:	88fa      	ldrh	r2, [r7, #6]
 8000e5c:	887b      	ldrh	r3, [r7, #2]
 8000e5e:	1ad3      	subs	r3, r2, r3
 8000e60:	b29b      	uxth	r3, r3
 8000e62:	88b9      	ldrh	r1, [r7, #4]
 8000e64:	883a      	ldrh	r2, [r7, #0]
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff fb4a 	bl	8000500 <ST7789_DrawPixel>
	ST7789_DrawLine(x0 - r, y0, x0 + r, y0, color);
 8000e6c:	88fa      	ldrh	r2, [r7, #6]
 8000e6e:	887b      	ldrh	r3, [r7, #2]
 8000e70:	1ad3      	subs	r3, r2, r3
 8000e72:	b298      	uxth	r0, r3
 8000e74:	88b9      	ldrh	r1, [r7, #4]
 8000e76:	88fa      	ldrh	r2, [r7, #6]
 8000e78:	887b      	ldrh	r3, [r7, #2]
 8000e7a:	4413      	add	r3, r2
 8000e7c:	b29a      	uxth	r2, r3
 8000e7e:	88bc      	ldrh	r4, [r7, #4]
 8000e80:	883b      	ldrh	r3, [r7, #0]
 8000e82:	9300      	str	r3, [sp, #0]
 8000e84:	4623      	mov	r3, r4
 8000e86:	f7ff fb6f 	bl	8000568 <ST7789_DrawLine>

	while (x < y) {
 8000e8a:	e079      	b.n	8000f80 <ST7789_DrawFilledCircle+0x1a8>
		if (f >= 0) {
 8000e8c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	db0e      	blt.n	8000eb2 <ST7789_DrawFilledCircle+0xda>
			y--;
 8000e94:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e98:	b29b      	uxth	r3, r3
 8000e9a:	3b01      	subs	r3, #1
 8000e9c:	b29b      	uxth	r3, r3
 8000e9e:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 8000ea0:	8a7b      	ldrh	r3, [r7, #18]
 8000ea2:	3302      	adds	r3, #2
 8000ea4:	b29b      	uxth	r3, r3
 8000ea6:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 8000ea8:	8afa      	ldrh	r2, [r7, #22]
 8000eaa:	8a7b      	ldrh	r3, [r7, #18]
 8000eac:	4413      	add	r3, r2
 8000eae:	b29b      	uxth	r3, r3
 8000eb0:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 8000eb2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000eb6:	b29b      	uxth	r3, r3
 8000eb8:	3301      	adds	r3, #1
 8000eba:	b29b      	uxth	r3, r3
 8000ebc:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 8000ebe:	8abb      	ldrh	r3, [r7, #20]
 8000ec0:	3302      	adds	r3, #2
 8000ec2:	b29b      	uxth	r3, r3
 8000ec4:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 8000ec6:	8afa      	ldrh	r2, [r7, #22]
 8000ec8:	8abb      	ldrh	r3, [r7, #20]
 8000eca:	4413      	add	r3, r2
 8000ecc:	b29b      	uxth	r3, r3
 8000ece:	82fb      	strh	r3, [r7, #22]

		ST7789_DrawLine(x0 - x, y0 + y, x0 + x, y0 + y, color);
 8000ed0:	88fa      	ldrh	r2, [r7, #6]
 8000ed2:	8a3b      	ldrh	r3, [r7, #16]
 8000ed4:	1ad3      	subs	r3, r2, r3
 8000ed6:	b298      	uxth	r0, r3
 8000ed8:	88ba      	ldrh	r2, [r7, #4]
 8000eda:	89fb      	ldrh	r3, [r7, #14]
 8000edc:	4413      	add	r3, r2
 8000ede:	b299      	uxth	r1, r3
 8000ee0:	88fa      	ldrh	r2, [r7, #6]
 8000ee2:	8a3b      	ldrh	r3, [r7, #16]
 8000ee4:	4413      	add	r3, r2
 8000ee6:	b29c      	uxth	r4, r3
 8000ee8:	88ba      	ldrh	r2, [r7, #4]
 8000eea:	89fb      	ldrh	r3, [r7, #14]
 8000eec:	4413      	add	r3, r2
 8000eee:	b29a      	uxth	r2, r3
 8000ef0:	883b      	ldrh	r3, [r7, #0]
 8000ef2:	9300      	str	r3, [sp, #0]
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	4622      	mov	r2, r4
 8000ef8:	f7ff fb36 	bl	8000568 <ST7789_DrawLine>
		ST7789_DrawLine(x0 + x, y0 - y, x0 - x, y0 - y, color);
 8000efc:	88fa      	ldrh	r2, [r7, #6]
 8000efe:	8a3b      	ldrh	r3, [r7, #16]
 8000f00:	4413      	add	r3, r2
 8000f02:	b298      	uxth	r0, r3
 8000f04:	88ba      	ldrh	r2, [r7, #4]
 8000f06:	89fb      	ldrh	r3, [r7, #14]
 8000f08:	1ad3      	subs	r3, r2, r3
 8000f0a:	b299      	uxth	r1, r3
 8000f0c:	88fa      	ldrh	r2, [r7, #6]
 8000f0e:	8a3b      	ldrh	r3, [r7, #16]
 8000f10:	1ad3      	subs	r3, r2, r3
 8000f12:	b29c      	uxth	r4, r3
 8000f14:	88ba      	ldrh	r2, [r7, #4]
 8000f16:	89fb      	ldrh	r3, [r7, #14]
 8000f18:	1ad3      	subs	r3, r2, r3
 8000f1a:	b29a      	uxth	r2, r3
 8000f1c:	883b      	ldrh	r3, [r7, #0]
 8000f1e:	9300      	str	r3, [sp, #0]
 8000f20:	4613      	mov	r3, r2
 8000f22:	4622      	mov	r2, r4
 8000f24:	f7ff fb20 	bl	8000568 <ST7789_DrawLine>

		ST7789_DrawLine(x0 + y, y0 + x, x0 - y, y0 + x, color);
 8000f28:	88fa      	ldrh	r2, [r7, #6]
 8000f2a:	89fb      	ldrh	r3, [r7, #14]
 8000f2c:	4413      	add	r3, r2
 8000f2e:	b298      	uxth	r0, r3
 8000f30:	88ba      	ldrh	r2, [r7, #4]
 8000f32:	8a3b      	ldrh	r3, [r7, #16]
 8000f34:	4413      	add	r3, r2
 8000f36:	b299      	uxth	r1, r3
 8000f38:	88fa      	ldrh	r2, [r7, #6]
 8000f3a:	89fb      	ldrh	r3, [r7, #14]
 8000f3c:	1ad3      	subs	r3, r2, r3
 8000f3e:	b29c      	uxth	r4, r3
 8000f40:	88ba      	ldrh	r2, [r7, #4]
 8000f42:	8a3b      	ldrh	r3, [r7, #16]
 8000f44:	4413      	add	r3, r2
 8000f46:	b29a      	uxth	r2, r3
 8000f48:	883b      	ldrh	r3, [r7, #0]
 8000f4a:	9300      	str	r3, [sp, #0]
 8000f4c:	4613      	mov	r3, r2
 8000f4e:	4622      	mov	r2, r4
 8000f50:	f7ff fb0a 	bl	8000568 <ST7789_DrawLine>
		ST7789_DrawLine(x0 + y, y0 - x, x0 - y, y0 - x, color);
 8000f54:	88fa      	ldrh	r2, [r7, #6]
 8000f56:	89fb      	ldrh	r3, [r7, #14]
 8000f58:	4413      	add	r3, r2
 8000f5a:	b298      	uxth	r0, r3
 8000f5c:	88ba      	ldrh	r2, [r7, #4]
 8000f5e:	8a3b      	ldrh	r3, [r7, #16]
 8000f60:	1ad3      	subs	r3, r2, r3
 8000f62:	b299      	uxth	r1, r3
 8000f64:	88fa      	ldrh	r2, [r7, #6]
 8000f66:	89fb      	ldrh	r3, [r7, #14]
 8000f68:	1ad3      	subs	r3, r2, r3
 8000f6a:	b29c      	uxth	r4, r3
 8000f6c:	88ba      	ldrh	r2, [r7, #4]
 8000f6e:	8a3b      	ldrh	r3, [r7, #16]
 8000f70:	1ad3      	subs	r3, r2, r3
 8000f72:	b29a      	uxth	r2, r3
 8000f74:	883b      	ldrh	r3, [r7, #0]
 8000f76:	9300      	str	r3, [sp, #0]
 8000f78:	4613      	mov	r3, r2
 8000f7a:	4622      	mov	r2, r4
 8000f7c:	f7ff faf4 	bl	8000568 <ST7789_DrawLine>
	while (x < y) {
 8000f80:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000f84:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	f6ff af7f 	blt.w	8000e8c <ST7789_DrawFilledCircle+0xb4>
	}
	ST7789_UnSelect();
 8000f8e:	2201      	movs	r2, #1
 8000f90:	2110      	movs	r1, #16
 8000f92:	4803      	ldr	r0, [pc, #12]	; (8000fa0 <ST7789_DrawFilledCircle+0x1c8>)
 8000f94:	f000 ff95 	bl	8001ec2 <HAL_GPIO_WritePin>
}
 8000f98:	bf00      	nop
 8000f9a:	371c      	adds	r7, #28
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd90      	pop	{r4, r7, pc}
 8000fa0:	40010800 	.word	0x40010800

08000fa4 <ST7789_Test>:
 * @brief A Simple test function for ST7789
 * @param  none
 * @return  none
 */
void ST7789_Test(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af04      	add	r7, sp, #16
	ST7789_Fill_Color(GREEN);
 8000faa:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8000fae:	f7ff fa77 	bl	80004a0 <ST7789_Fill_Color>
	HAL_Delay(1000);
 8000fb2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fb6:	f000 fd0d 	bl	80019d4 <HAL_Delay>
	ST7789_WriteString(40, 20, "SPEED TEST", Font_16x26, WHITE, GREEN);
 8000fba:	4bb3      	ldr	r3, [pc, #716]	; (8001288 <ST7789_Test+0x2e4>)
 8000fbc:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000fc0:	9202      	str	r2, [sp, #8]
 8000fc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fc6:	9201      	str	r2, [sp, #4]
 8000fc8:	685a      	ldr	r2, [r3, #4]
 8000fca:	9200      	str	r2, [sp, #0]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4aaf      	ldr	r2, [pc, #700]	; (800128c <ST7789_Test+0x2e8>)
 8000fd0:	2114      	movs	r1, #20
 8000fd2:	2028      	movs	r0, #40	; 0x28
 8000fd4:	f7ff fd4e 	bl	8000a74 <ST7789_WriteString>
	ST7789_WriteString(60, 75, "@ETE FMC", Font_16x26, WHITE, GREEN);
 8000fd8:	4bab      	ldr	r3, [pc, #684]	; (8001288 <ST7789_Test+0x2e4>)
 8000fda:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000fde:	9202      	str	r2, [sp, #8]
 8000fe0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fe4:	9201      	str	r2, [sp, #4]
 8000fe6:	685a      	ldr	r2, [r3, #4]
 8000fe8:	9200      	str	r2, [sp, #0]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4aa8      	ldr	r2, [pc, #672]	; (8001290 <ST7789_Test+0x2ec>)
 8000fee:	214b      	movs	r1, #75	; 0x4b
 8000ff0:	203c      	movs	r0, #60	; 0x3c
 8000ff2:	f7ff fd3f 	bl	8000a74 <ST7789_WriteString>
	HAL_Delay(2000);
 8000ff6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000ffa:	f000 fceb 	bl	80019d4 <HAL_Delay>
	ST7789_Fill_Color(RED);
 8000ffe:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8001002:	f7ff fa4d 	bl	80004a0 <ST7789_Fill_Color>
    HAL_Delay(500);
 8001006:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800100a:	f000 fce3 	bl	80019d4 <HAL_Delay>
	ST7789_Fill_Color(BLUE);
 800100e:	201f      	movs	r0, #31
 8001010:	f7ff fa46 	bl	80004a0 <ST7789_Fill_Color>
    HAL_Delay(500);
 8001014:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001018:	f000 fcdc 	bl	80019d4 <HAL_Delay>
	ST7789_Fill_Color(GREEN);
 800101c:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8001020:	f7ff fa3e 	bl	80004a0 <ST7789_Fill_Color>
    HAL_Delay(500);
 8001024:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001028:	f000 fcd4 	bl	80019d4 <HAL_Delay>
	ST7789_Fill_Color(YELLOW);
 800102c:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8001030:	f7ff fa36 	bl	80004a0 <ST7789_Fill_Color>
    HAL_Delay(500);
 8001034:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001038:	f000 fccc 	bl	80019d4 <HAL_Delay>
	ST7789_Fill_Color(WHITE);
 800103c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001040:	f7ff fa2e 	bl	80004a0 <ST7789_Fill_Color>
	HAL_Delay(500);
 8001044:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001048:	f000 fcc4 	bl	80019d4 <HAL_Delay>

	ST7789_WriteString(10, 50, "FONT TEST", Font_16x26, BLUE, WHITE);
 800104c:	4b8e      	ldr	r3, [pc, #568]	; (8001288 <ST7789_Test+0x2e4>)
 800104e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001052:	9202      	str	r2, [sp, #8]
 8001054:	221f      	movs	r2, #31
 8001056:	9201      	str	r2, [sp, #4]
 8001058:	685a      	ldr	r2, [r3, #4]
 800105a:	9200      	str	r2, [sp, #0]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4a8d      	ldr	r2, [pc, #564]	; (8001294 <ST7789_Test+0x2f0>)
 8001060:	2132      	movs	r1, #50	; 0x32
 8001062:	200a      	movs	r0, #10
 8001064:	f7ff fd06 	bl	8000a74 <ST7789_WriteString>
	ST7789_WriteString(10, 100, "Hello T34DS!", Font_7x10, RED, WHITE);
 8001068:	4b8b      	ldr	r3, [pc, #556]	; (8001298 <ST7789_Test+0x2f4>)
 800106a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800106e:	9202      	str	r2, [sp, #8]
 8001070:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001074:	9201      	str	r2, [sp, #4]
 8001076:	685a      	ldr	r2, [r3, #4]
 8001078:	9200      	str	r2, [sp, #0]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a87      	ldr	r2, [pc, #540]	; (800129c <ST7789_Test+0x2f8>)
 800107e:	2164      	movs	r1, #100	; 0x64
 8001080:	200a      	movs	r0, #10
 8001082:	f7ff fcf7 	bl	8000a74 <ST7789_WriteString>
	ST7789_WriteString(10, 140, "Hello T34DS!", Font_11x18, GREEN, WHITE);
 8001086:	4b86      	ldr	r3, [pc, #536]	; (80012a0 <ST7789_Test+0x2fc>)
 8001088:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800108c:	9202      	str	r2, [sp, #8]
 800108e:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001092:	9201      	str	r2, [sp, #4]
 8001094:	685a      	ldr	r2, [r3, #4]
 8001096:	9200      	str	r2, [sp, #0]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4a80      	ldr	r2, [pc, #512]	; (800129c <ST7789_Test+0x2f8>)
 800109c:	218c      	movs	r1, #140	; 0x8c
 800109e:	200a      	movs	r0, #10
 80010a0:	f7ff fce8 	bl	8000a74 <ST7789_WriteString>
	ST7789_WriteString(10, 180, "Hello T34DS!", Font_16x26, MAGENTA, WHITE);
 80010a4:	4b78      	ldr	r3, [pc, #480]	; (8001288 <ST7789_Test+0x2e4>)
 80010a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010aa:	9202      	str	r2, [sp, #8]
 80010ac:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80010b0:	9201      	str	r2, [sp, #4]
 80010b2:	685a      	ldr	r2, [r3, #4]
 80010b4:	9200      	str	r2, [sp, #0]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a78      	ldr	r2, [pc, #480]	; (800129c <ST7789_Test+0x2f8>)
 80010ba:	21b4      	movs	r1, #180	; 0xb4
 80010bc:	200a      	movs	r0, #10
 80010be:	f7ff fcd9 	bl	8000a74 <ST7789_WriteString>
	HAL_Delay(3000);
 80010c2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80010c6:	f000 fc85 	bl	80019d4 <HAL_Delay>

	ST7789_Fill_Color(RED);
 80010ca:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80010ce:	f7ff f9e7 	bl	80004a0 <ST7789_Fill_Color>
	ST7789_WriteString(10, 10, "Rectangle Test", Font_11x18, YELLOW, BLACK);
 80010d2:	4b73      	ldr	r3, [pc, #460]	; (80012a0 <ST7789_Test+0x2fc>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	9202      	str	r2, [sp, #8]
 80010d8:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80010dc:	9201      	str	r2, [sp, #4]
 80010de:	685a      	ldr	r2, [r3, #4]
 80010e0:	9200      	str	r2, [sp, #0]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a6f      	ldr	r2, [pc, #444]	; (80012a4 <ST7789_Test+0x300>)
 80010e6:	210a      	movs	r1, #10
 80010e8:	200a      	movs	r0, #10
 80010ea:	f7ff fcc3 	bl	8000a74 <ST7789_WriteString>
	ST7789_DrawRectangle(50, 100, 100, 150, WHITE);
 80010ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010f2:	9300      	str	r3, [sp, #0]
 80010f4:	2396      	movs	r3, #150	; 0x96
 80010f6:	2264      	movs	r2, #100	; 0x64
 80010f8:	2164      	movs	r1, #100	; 0x64
 80010fa:	2032      	movs	r0, #50	; 0x32
 80010fc:	f7ff fac0 	bl	8000680 <ST7789_DrawRectangle>
	HAL_Delay(1000);
 8001100:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001104:	f000 fc66 	bl	80019d4 <HAL_Delay>

	ST7789_Fill_Color(RED);
 8001108:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 800110c:	f7ff f9c8 	bl	80004a0 <ST7789_Fill_Color>
	ST7789_WriteString(10, 10, "Filled Rectangle", Font_11x18, YELLOW, BLACK);
 8001110:	4b63      	ldr	r3, [pc, #396]	; (80012a0 <ST7789_Test+0x2fc>)
 8001112:	2200      	movs	r2, #0
 8001114:	9202      	str	r2, [sp, #8]
 8001116:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800111a:	9201      	str	r2, [sp, #4]
 800111c:	685a      	ldr	r2, [r3, #4]
 800111e:	9200      	str	r2, [sp, #0]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a61      	ldr	r2, [pc, #388]	; (80012a8 <ST7789_Test+0x304>)
 8001124:	210a      	movs	r1, #10
 8001126:	200a      	movs	r0, #10
 8001128:	f7ff fca4 	bl	8000a74 <ST7789_WriteString>
	ST7789_DrawFilledRectangle(50, 100, 50, 100, WHITE);
 800112c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001130:	9300      	str	r3, [sp, #0]
 8001132:	2364      	movs	r3, #100	; 0x64
 8001134:	2232      	movs	r2, #50	; 0x32
 8001136:	2164      	movs	r1, #100	; 0x64
 8001138:	2032      	movs	r0, #50	; 0x32
 800113a:	f7ff fced 	bl	8000b18 <ST7789_DrawFilledRectangle>
	HAL_Delay(1000);
 800113e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001142:	f000 fc47 	bl	80019d4 <HAL_Delay>

	ST7789_Fill_Color(RED);
 8001146:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 800114a:	f7ff f9a9 	bl	80004a0 <ST7789_Fill_Color>
	ST7789_WriteString(10, 10, "Circle", Font_11x18, YELLOW, BLACK);
 800114e:	4b54      	ldr	r3, [pc, #336]	; (80012a0 <ST7789_Test+0x2fc>)
 8001150:	2200      	movs	r2, #0
 8001152:	9202      	str	r2, [sp, #8]
 8001154:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001158:	9201      	str	r2, [sp, #4]
 800115a:	685a      	ldr	r2, [r3, #4]
 800115c:	9200      	str	r2, [sp, #0]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a52      	ldr	r2, [pc, #328]	; (80012ac <ST7789_Test+0x308>)
 8001162:	210a      	movs	r1, #10
 8001164:	200a      	movs	r0, #10
 8001166:	f7ff fc85 	bl	8000a74 <ST7789_WriteString>
	ST7789_DrawCircle(120, 120, 50, WHITE);
 800116a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800116e:	2232      	movs	r2, #50	; 0x32
 8001170:	2178      	movs	r1, #120	; 0x78
 8001172:	2078      	movs	r0, #120	; 0x78
 8001174:	f7ff fac8 	bl	8000708 <ST7789_DrawCircle>
	HAL_Delay(1000);
 8001178:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800117c:	f000 fc2a 	bl	80019d4 <HAL_Delay>

	ST7789_Fill_Color(RED);
 8001180:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8001184:	f7ff f98c 	bl	80004a0 <ST7789_Fill_Color>
	ST7789_WriteString(10, 10, "Filled Cir.", Font_11x18, YELLOW, BLACK);
 8001188:	4b45      	ldr	r3, [pc, #276]	; (80012a0 <ST7789_Test+0x2fc>)
 800118a:	2200      	movs	r2, #0
 800118c:	9202      	str	r2, [sp, #8]
 800118e:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001192:	9201      	str	r2, [sp, #4]
 8001194:	685a      	ldr	r2, [r3, #4]
 8001196:	9200      	str	r2, [sp, #0]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a45      	ldr	r2, [pc, #276]	; (80012b0 <ST7789_Test+0x30c>)
 800119c:	210a      	movs	r1, #10
 800119e:	200a      	movs	r0, #10
 80011a0:	f7ff fc68 	bl	8000a74 <ST7789_WriteString>
	ST7789_DrawFilledCircle(120, 120, 50, WHITE);
 80011a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011a8:	2232      	movs	r2, #50	; 0x32
 80011aa:	2178      	movs	r1, #120	; 0x78
 80011ac:	2078      	movs	r0, #120	; 0x78
 80011ae:	f7ff fe13 	bl	8000dd8 <ST7789_DrawFilledCircle>
	HAL_Delay(1000);
 80011b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011b6:	f000 fc0d 	bl	80019d4 <HAL_Delay>

	ST7789_Fill_Color(RED);
 80011ba:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80011be:	f7ff f96f 	bl	80004a0 <ST7789_Fill_Color>
	ST7789_WriteString(10, 10, "Triangle", Font_11x18, YELLOW, BLACK);
 80011c2:	4b37      	ldr	r3, [pc, #220]	; (80012a0 <ST7789_Test+0x2fc>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	9202      	str	r2, [sp, #8]
 80011c8:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80011cc:	9201      	str	r2, [sp, #4]
 80011ce:	685a      	ldr	r2, [r3, #4]
 80011d0:	9200      	str	r2, [sp, #0]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a37      	ldr	r2, [pc, #220]	; (80012b4 <ST7789_Test+0x310>)
 80011d6:	210a      	movs	r1, #10
 80011d8:	200a      	movs	r0, #10
 80011da:	f7ff fc4b 	bl	8000a74 <ST7789_WriteString>
	ST7789_DrawTriangle(40, 40, 80, 40, 40, 80, WHITE);
 80011de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011e2:	9302      	str	r3, [sp, #8]
 80011e4:	2350      	movs	r3, #80	; 0x50
 80011e6:	9301      	str	r3, [sp, #4]
 80011e8:	2328      	movs	r3, #40	; 0x28
 80011ea:	9300      	str	r3, [sp, #0]
 80011ec:	2328      	movs	r3, #40	; 0x28
 80011ee:	2250      	movs	r2, #80	; 0x50
 80011f0:	2128      	movs	r1, #40	; 0x28
 80011f2:	2028      	movs	r0, #40	; 0x28
 80011f4:	f7ff fce8 	bl	8000bc8 <ST7789_DrawTriangle>
	HAL_Delay(1000);
 80011f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011fc:	f000 fbea 	bl	80019d4 <HAL_Delay>

	ST7789_Fill_Color(RED);
 8001200:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8001204:	f7ff f94c 	bl	80004a0 <ST7789_Fill_Color>
	ST7789_WriteString(10, 10, "Filled Triangle", Font_11x18, YELLOW, BLACK);
 8001208:	4b25      	ldr	r3, [pc, #148]	; (80012a0 <ST7789_Test+0x2fc>)
 800120a:	2200      	movs	r2, #0
 800120c:	9202      	str	r2, [sp, #8]
 800120e:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001212:	9201      	str	r2, [sp, #4]
 8001214:	685a      	ldr	r2, [r3, #4]
 8001216:	9200      	str	r2, [sp, #0]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a27      	ldr	r2, [pc, #156]	; (80012b8 <ST7789_Test+0x314>)
 800121c:	210a      	movs	r1, #10
 800121e:	200a      	movs	r0, #10
 8001220:	f7ff fc28 	bl	8000a74 <ST7789_WriteString>
	ST7789_DrawFilledTriangle(40, 40, 80, 40, 40, 80, WHITE);
 8001224:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001228:	9302      	str	r3, [sp, #8]
 800122a:	2350      	movs	r3, #80	; 0x50
 800122c:	9301      	str	r3, [sp, #4]
 800122e:	2328      	movs	r3, #40	; 0x28
 8001230:	9300      	str	r3, [sp, #0]
 8001232:	2328      	movs	r3, #40	; 0x28
 8001234:	2250      	movs	r2, #80	; 0x50
 8001236:	2128      	movs	r1, #40	; 0x28
 8001238:	2028      	movs	r0, #40	; 0x28
 800123a:	f7ff fcff 	bl	8000c3c <ST7789_DrawFilledTriangle>
	HAL_Delay(1000);
 800123e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001242:	f000 fbc7 	bl	80019d4 <HAL_Delay>

	//	If FLASH cannot storage anymore datas, please delete codes below.
	ST7789_Fill_Color(WHITE);
 8001246:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800124a:	f7ff f929 	bl	80004a0 <ST7789_Fill_Color>
	ST7789_WriteString(10,10,"BMP Test", Font_11x18, BLACK, WHITE);
 800124e:	4b14      	ldr	r3, [pc, #80]	; (80012a0 <ST7789_Test+0x2fc>)
 8001250:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001254:	9202      	str	r2, [sp, #8]
 8001256:	2200      	movs	r2, #0
 8001258:	9201      	str	r2, [sp, #4]
 800125a:	685a      	ldr	r2, [r3, #4]
 800125c:	9200      	str	r2, [sp, #0]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a16      	ldr	r2, [pc, #88]	; (80012bc <ST7789_Test+0x318>)
 8001262:	210a      	movs	r1, #10
 8001264:	200a      	movs	r0, #10
 8001266:	f7ff fc05 	bl	8000a74 <ST7789_WriteString>
	ST7789_DrawImage(56, 56, 128, 128, (uint16_t *)saber);
 800126a:	4b15      	ldr	r3, [pc, #84]	; (80012c0 <ST7789_Test+0x31c>)
 800126c:	9300      	str	r3, [sp, #0]
 800126e:	2380      	movs	r3, #128	; 0x80
 8001270:	2280      	movs	r2, #128	; 0x80
 8001272:	2138      	movs	r1, #56	; 0x38
 8001274:	2038      	movs	r0, #56	; 0x38
 8001276:	f7ff fb2d 	bl	80008d4 <ST7789_DrawImage>
	HAL_Delay(5000);
 800127a:	f241 3088 	movw	r0, #5000	; 0x1388
 800127e:	f000 fba9 	bl	80019d4 <HAL_Delay>



}
 8001282:	bf00      	nop
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	20000010 	.word	0x20000010
 800128c:	08002c2c 	.word	0x08002c2c
 8001290:	08002c38 	.word	0x08002c38
 8001294:	08002c44 	.word	0x08002c44
 8001298:	20000000 	.word	0x20000000
 800129c:	08002c50 	.word	0x08002c50
 80012a0:	20000008 	.word	0x20000008
 80012a4:	08002c60 	.word	0x08002c60
 80012a8:	08002c70 	.word	0x08002c70
 80012ac:	08002c84 	.word	0x08002c84
 80012b0:	08002c8c 	.word	0x08002c8c
 80012b4:	08002c98 	.word	0x08002c98
 80012b8:	08002ca4 	.word	0x08002ca4
 80012bc:	08002cb4 	.word	0x08002cb4
 80012c0:	08005510 	.word	0x08005510

080012c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */

	ST7789_Fill_Color(WHITE);
 80012ca:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80012ce:	f7ff f8e7 	bl	80004a0 <ST7789_Fill_Color>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012d2:	f000 fb1d 	bl	8001910 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012d6:	f000 f96d 	bl	80015b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012da:	f000 f9e3 	bl	80016a4 <MX_GPIO_Init>
  MX_SPI1_Init();
 80012de:	f000 f9ab 	bl	8001638 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  ST7789_Init();
 80012e2:	f7ff f83f 	bl	8000364 <ST7789_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  ST7789_Fill_Color(0xFFFF);
 80012e6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80012ea:	f7ff f8d9 	bl	80004a0 <ST7789_Fill_Color>

  	ST7789_DrawFilledRectangle(25, 25, 35, 40, 0X07FF);
 80012ee:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80012f2:	9300      	str	r3, [sp, #0]
 80012f4:	2328      	movs	r3, #40	; 0x28
 80012f6:	2223      	movs	r2, #35	; 0x23
 80012f8:	2119      	movs	r1, #25
 80012fa:	2019      	movs	r0, #25
 80012fc:	f7ff fc0c 	bl	8000b18 <ST7789_DrawFilledRectangle>

    ST7789_DrawFilledRectangle(30, 30, 25, 30, 0xF81F);
 8001300:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8001304:	9300      	str	r3, [sp, #0]
 8001306:	231e      	movs	r3, #30
 8001308:	2219      	movs	r2, #25
 800130a:	211e      	movs	r1, #30
 800130c:	201e      	movs	r0, #30
 800130e:	f7ff fc03 	bl	8000b18 <ST7789_DrawFilledRectangle>
    ST7789_DrawFilledRectangle(30, 80, 25, 30, 0xF81F);
 8001312:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8001316:	9300      	str	r3, [sp, #0]
 8001318:	231e      	movs	r3, #30
 800131a:	2219      	movs	r2, #25
 800131c:	2150      	movs	r1, #80	; 0x50
 800131e:	201e      	movs	r0, #30
 8001320:	f7ff fbfa 	bl	8000b18 <ST7789_DrawFilledRectangle>
    ST7789_DrawFilledRectangle(30, 130, 25, 30, 0xF81F);
 8001324:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8001328:	9300      	str	r3, [sp, #0]
 800132a:	231e      	movs	r3, #30
 800132c:	2219      	movs	r2, #25
 800132e:	2182      	movs	r1, #130	; 0x82
 8001330:	201e      	movs	r0, #30
 8001332:	f7ff fbf1 	bl	8000b18 <ST7789_DrawFilledRectangle>
    ST7789_DrawFilledRectangle(30, 180, 25, 30, 0xF81F);
 8001336:	f64f 031f 	movw	r3, #63519	; 0xf81f
 800133a:	9300      	str	r3, [sp, #0]
 800133c:	231e      	movs	r3, #30
 800133e:	2219      	movs	r2, #25
 8001340:	21b4      	movs	r1, #180	; 0xb4
 8001342:	201e      	movs	r0, #30
 8001344:	f7ff fbe8 	bl	8000b18 <ST7789_DrawFilledRectangle>

    ST7789_DrawFilledRectangle(85, 30, 25, 30, 0xF81F);
 8001348:	f64f 031f 	movw	r3, #63519	; 0xf81f
 800134c:	9300      	str	r3, [sp, #0]
 800134e:	231e      	movs	r3, #30
 8001350:	2219      	movs	r2, #25
 8001352:	211e      	movs	r1, #30
 8001354:	2055      	movs	r0, #85	; 0x55
 8001356:	f7ff fbdf 	bl	8000b18 <ST7789_DrawFilledRectangle>
    ST7789_DrawFilledRectangle(85, 80, 25, 30, 0xF81F);
 800135a:	f64f 031f 	movw	r3, #63519	; 0xf81f
 800135e:	9300      	str	r3, [sp, #0]
 8001360:	231e      	movs	r3, #30
 8001362:	2219      	movs	r2, #25
 8001364:	2150      	movs	r1, #80	; 0x50
 8001366:	2055      	movs	r0, #85	; 0x55
 8001368:	f7ff fbd6 	bl	8000b18 <ST7789_DrawFilledRectangle>
    ST7789_DrawFilledRectangle(85, 130, 25, 30, 0xF81F);
 800136c:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8001370:	9300      	str	r3, [sp, #0]
 8001372:	231e      	movs	r3, #30
 8001374:	2219      	movs	r2, #25
 8001376:	2182      	movs	r1, #130	; 0x82
 8001378:	2055      	movs	r0, #85	; 0x55
 800137a:	f7ff fbcd 	bl	8000b18 <ST7789_DrawFilledRectangle>
    ST7789_DrawFilledRectangle(85, 180, 25, 30, 0xF81F);
 800137e:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8001382:	9300      	str	r3, [sp, #0]
 8001384:	231e      	movs	r3, #30
 8001386:	2219      	movs	r2, #25
 8001388:	21b4      	movs	r1, #180	; 0xb4
 800138a:	2055      	movs	r0, #85	; 0x55
 800138c:	f7ff fbc4 	bl	8000b18 <ST7789_DrawFilledRectangle>

    ST7789_DrawFilledRectangle(140, 30, 25, 30, 0xF81F);
 8001390:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8001394:	9300      	str	r3, [sp, #0]
 8001396:	231e      	movs	r3, #30
 8001398:	2219      	movs	r2, #25
 800139a:	211e      	movs	r1, #30
 800139c:	208c      	movs	r0, #140	; 0x8c
 800139e:	f7ff fbbb 	bl	8000b18 <ST7789_DrawFilledRectangle>
    ST7789_DrawFilledRectangle(140, 80, 25, 30, 0xF81F);
 80013a2:	f64f 031f 	movw	r3, #63519	; 0xf81f
 80013a6:	9300      	str	r3, [sp, #0]
 80013a8:	231e      	movs	r3, #30
 80013aa:	2219      	movs	r2, #25
 80013ac:	2150      	movs	r1, #80	; 0x50
 80013ae:	208c      	movs	r0, #140	; 0x8c
 80013b0:	f7ff fbb2 	bl	8000b18 <ST7789_DrawFilledRectangle>
    ST7789_DrawFilledRectangle(140, 130, 25, 30, 0xF81F);
 80013b4:	f64f 031f 	movw	r3, #63519	; 0xf81f
 80013b8:	9300      	str	r3, [sp, #0]
 80013ba:	231e      	movs	r3, #30
 80013bc:	2219      	movs	r2, #25
 80013be:	2182      	movs	r1, #130	; 0x82
 80013c0:	208c      	movs	r0, #140	; 0x8c
 80013c2:	f7ff fba9 	bl	8000b18 <ST7789_DrawFilledRectangle>
    ST7789_DrawFilledRectangle(140, 180, 25, 30, 0xF81F);
 80013c6:	f64f 031f 	movw	r3, #63519	; 0xf81f
 80013ca:	9300      	str	r3, [sp, #0]
 80013cc:	231e      	movs	r3, #30
 80013ce:	2219      	movs	r2, #25
 80013d0:	21b4      	movs	r1, #180	; 0xb4
 80013d2:	208c      	movs	r0, #140	; 0x8c
 80013d4:	f7ff fba0 	bl	8000b18 <ST7789_DrawFilledRectangle>

    ST7789_DrawFilledRectangle(195, 30, 25, 30, 0xF81F);
 80013d8:	f64f 031f 	movw	r3, #63519	; 0xf81f
 80013dc:	9300      	str	r3, [sp, #0]
 80013de:	231e      	movs	r3, #30
 80013e0:	2219      	movs	r2, #25
 80013e2:	211e      	movs	r1, #30
 80013e4:	20c3      	movs	r0, #195	; 0xc3
 80013e6:	f7ff fb97 	bl	8000b18 <ST7789_DrawFilledRectangle>
    ST7789_DrawFilledRectangle(195, 80, 25, 30, 0xF81F);
 80013ea:	f64f 031f 	movw	r3, #63519	; 0xf81f
 80013ee:	9300      	str	r3, [sp, #0]
 80013f0:	231e      	movs	r3, #30
 80013f2:	2219      	movs	r2, #25
 80013f4:	2150      	movs	r1, #80	; 0x50
 80013f6:	20c3      	movs	r0, #195	; 0xc3
 80013f8:	f7ff fb8e 	bl	8000b18 <ST7789_DrawFilledRectangle>
    ST7789_DrawFilledRectangle(195, 130, 25, 30, 0xF81F);
 80013fc:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8001400:	9300      	str	r3, [sp, #0]
 8001402:	231e      	movs	r3, #30
 8001404:	2219      	movs	r2, #25
 8001406:	2182      	movs	r1, #130	; 0x82
 8001408:	20c3      	movs	r0, #195	; 0xc3
 800140a:	f7ff fb85 	bl	8000b18 <ST7789_DrawFilledRectangle>
    ST7789_DrawFilledRectangle(195, 180, 25, 30, 0xF81F);
 800140e:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8001412:	9300      	str	r3, [sp, #0]
 8001414:	231e      	movs	r3, #30
 8001416:	2219      	movs	r2, #25
 8001418:	21b4      	movs	r1, #180	; 0xb4
 800141a:	20c3      	movs	r0, #195	; 0xc3
 800141c:	f7ff fb7c 	bl	8000b18 <ST7789_DrawFilledRectangle>


  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == 1)
 8001420:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001424:	485f      	ldr	r0, [pc, #380]	; (80015a4 <main+0x2e0>)
 8001426:	f000 fd35 	bl	8001e94 <HAL_GPIO_ReadPin>
 800142a:	4603      	mov	r3, r0
 800142c:	2b01      	cmp	r3, #1
 800142e:	f040 8099 	bne.w	8001564 <main+0x2a0>
  {
  ST7789_DrawFilledRectangle(80, 25, 35, 40, 0X07FF);
 8001432:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001436:	9300      	str	r3, [sp, #0]
 8001438:	2328      	movs	r3, #40	; 0x28
 800143a:	2223      	movs	r2, #35	; 0x23
 800143c:	2119      	movs	r1, #25
 800143e:	2050      	movs	r0, #80	; 0x50
 8001440:	f7ff fb6a 	bl	8000b18 <ST7789_DrawFilledRectangle>

  ST7789_DrawFilledRectangle(30, 30, 25, 30, 0xF81F);
 8001444:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8001448:	9300      	str	r3, [sp, #0]
 800144a:	231e      	movs	r3, #30
 800144c:	2219      	movs	r2, #25
 800144e:	211e      	movs	r1, #30
 8001450:	201e      	movs	r0, #30
 8001452:	f7ff fb61 	bl	8000b18 <ST7789_DrawFilledRectangle>
  ST7789_DrawFilledRectangle(30, 80, 25, 30, 0xF81F);
 8001456:	f64f 031f 	movw	r3, #63519	; 0xf81f
 800145a:	9300      	str	r3, [sp, #0]
 800145c:	231e      	movs	r3, #30
 800145e:	2219      	movs	r2, #25
 8001460:	2150      	movs	r1, #80	; 0x50
 8001462:	201e      	movs	r0, #30
 8001464:	f7ff fb58 	bl	8000b18 <ST7789_DrawFilledRectangle>
  ST7789_DrawFilledRectangle(30, 130, 25, 30, 0xF81F);
 8001468:	f64f 031f 	movw	r3, #63519	; 0xf81f
 800146c:	9300      	str	r3, [sp, #0]
 800146e:	231e      	movs	r3, #30
 8001470:	2219      	movs	r2, #25
 8001472:	2182      	movs	r1, #130	; 0x82
 8001474:	201e      	movs	r0, #30
 8001476:	f7ff fb4f 	bl	8000b18 <ST7789_DrawFilledRectangle>
  ST7789_DrawFilledRectangle(30, 180, 25, 30, 0xF81F);
 800147a:	f64f 031f 	movw	r3, #63519	; 0xf81f
 800147e:	9300      	str	r3, [sp, #0]
 8001480:	231e      	movs	r3, #30
 8001482:	2219      	movs	r2, #25
 8001484:	21b4      	movs	r1, #180	; 0xb4
 8001486:	201e      	movs	r0, #30
 8001488:	f7ff fb46 	bl	8000b18 <ST7789_DrawFilledRectangle>

  ST7789_DrawFilledRectangle(85, 30, 25, 30, 0xF81F);
 800148c:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8001490:	9300      	str	r3, [sp, #0]
 8001492:	231e      	movs	r3, #30
 8001494:	2219      	movs	r2, #25
 8001496:	211e      	movs	r1, #30
 8001498:	2055      	movs	r0, #85	; 0x55
 800149a:	f7ff fb3d 	bl	8000b18 <ST7789_DrawFilledRectangle>
  ST7789_DrawFilledRectangle(85, 80, 25, 30, 0xF81F);
 800149e:	f64f 031f 	movw	r3, #63519	; 0xf81f
 80014a2:	9300      	str	r3, [sp, #0]
 80014a4:	231e      	movs	r3, #30
 80014a6:	2219      	movs	r2, #25
 80014a8:	2150      	movs	r1, #80	; 0x50
 80014aa:	2055      	movs	r0, #85	; 0x55
 80014ac:	f7ff fb34 	bl	8000b18 <ST7789_DrawFilledRectangle>
  ST7789_DrawFilledRectangle(85, 130, 25, 30, 0xF81F);
 80014b0:	f64f 031f 	movw	r3, #63519	; 0xf81f
 80014b4:	9300      	str	r3, [sp, #0]
 80014b6:	231e      	movs	r3, #30
 80014b8:	2219      	movs	r2, #25
 80014ba:	2182      	movs	r1, #130	; 0x82
 80014bc:	2055      	movs	r0, #85	; 0x55
 80014be:	f7ff fb2b 	bl	8000b18 <ST7789_DrawFilledRectangle>
  ST7789_DrawFilledRectangle(85, 180, 25, 30, 0xF81F);
 80014c2:	f64f 031f 	movw	r3, #63519	; 0xf81f
 80014c6:	9300      	str	r3, [sp, #0]
 80014c8:	231e      	movs	r3, #30
 80014ca:	2219      	movs	r2, #25
 80014cc:	21b4      	movs	r1, #180	; 0xb4
 80014ce:	2055      	movs	r0, #85	; 0x55
 80014d0:	f7ff fb22 	bl	8000b18 <ST7789_DrawFilledRectangle>

  ST7789_DrawFilledRectangle(140, 30, 25, 30, 0xF81F);
 80014d4:	f64f 031f 	movw	r3, #63519	; 0xf81f
 80014d8:	9300      	str	r3, [sp, #0]
 80014da:	231e      	movs	r3, #30
 80014dc:	2219      	movs	r2, #25
 80014de:	211e      	movs	r1, #30
 80014e0:	208c      	movs	r0, #140	; 0x8c
 80014e2:	f7ff fb19 	bl	8000b18 <ST7789_DrawFilledRectangle>
  ST7789_DrawFilledRectangle(140, 80, 25, 30, 0xF81F);
 80014e6:	f64f 031f 	movw	r3, #63519	; 0xf81f
 80014ea:	9300      	str	r3, [sp, #0]
 80014ec:	231e      	movs	r3, #30
 80014ee:	2219      	movs	r2, #25
 80014f0:	2150      	movs	r1, #80	; 0x50
 80014f2:	208c      	movs	r0, #140	; 0x8c
 80014f4:	f7ff fb10 	bl	8000b18 <ST7789_DrawFilledRectangle>
  ST7789_DrawFilledRectangle(140, 130, 25, 30, 0xF81F);
 80014f8:	f64f 031f 	movw	r3, #63519	; 0xf81f
 80014fc:	9300      	str	r3, [sp, #0]
 80014fe:	231e      	movs	r3, #30
 8001500:	2219      	movs	r2, #25
 8001502:	2182      	movs	r1, #130	; 0x82
 8001504:	208c      	movs	r0, #140	; 0x8c
 8001506:	f7ff fb07 	bl	8000b18 <ST7789_DrawFilledRectangle>
  ST7789_DrawFilledRectangle(140, 180, 25, 30, 0xF81F);
 800150a:	f64f 031f 	movw	r3, #63519	; 0xf81f
 800150e:	9300      	str	r3, [sp, #0]
 8001510:	231e      	movs	r3, #30
 8001512:	2219      	movs	r2, #25
 8001514:	21b4      	movs	r1, #180	; 0xb4
 8001516:	208c      	movs	r0, #140	; 0x8c
 8001518:	f7ff fafe 	bl	8000b18 <ST7789_DrawFilledRectangle>

  ST7789_DrawFilledRectangle(195, 30, 25, 30, 0xF81F);
 800151c:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8001520:	9300      	str	r3, [sp, #0]
 8001522:	231e      	movs	r3, #30
 8001524:	2219      	movs	r2, #25
 8001526:	211e      	movs	r1, #30
 8001528:	20c3      	movs	r0, #195	; 0xc3
 800152a:	f7ff faf5 	bl	8000b18 <ST7789_DrawFilledRectangle>
  ST7789_DrawFilledRectangle(195, 80, 25, 30, 0xF81F);
 800152e:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8001532:	9300      	str	r3, [sp, #0]
 8001534:	231e      	movs	r3, #30
 8001536:	2219      	movs	r2, #25
 8001538:	2150      	movs	r1, #80	; 0x50
 800153a:	20c3      	movs	r0, #195	; 0xc3
 800153c:	f7ff faec 	bl	8000b18 <ST7789_DrawFilledRectangle>
  ST7789_DrawFilledRectangle(195, 130, 25, 30, 0xF81F);
 8001540:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8001544:	9300      	str	r3, [sp, #0]
 8001546:	231e      	movs	r3, #30
 8001548:	2219      	movs	r2, #25
 800154a:	2182      	movs	r1, #130	; 0x82
 800154c:	20c3      	movs	r0, #195	; 0xc3
 800154e:	f7ff fae3 	bl	8000b18 <ST7789_DrawFilledRectangle>
  ST7789_DrawFilledRectangle(195, 180, 25, 30, 0xF81F);
 8001552:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8001556:	9300      	str	r3, [sp, #0]
 8001558:	231e      	movs	r3, #30
 800155a:	2219      	movs	r2, #25
 800155c:	21b4      	movs	r1, #180	; 0xb4
 800155e:	20c3      	movs	r0, #195	; 0xc3
 8001560:	f7ff fada 	bl	8000b18 <ST7789_DrawFilledRectangle>
  }


  while (1)
  {
		ST7789_WriteString(100, 50, "Bem vindo ao Jogo da memoria", Font_16x26, WHITE, GREEN);
 8001564:	4b10      	ldr	r3, [pc, #64]	; (80015a8 <main+0x2e4>)
 8001566:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800156a:	9202      	str	r2, [sp, #8]
 800156c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001570:	9201      	str	r2, [sp, #4]
 8001572:	685a      	ldr	r2, [r3, #4]
 8001574:	9200      	str	r2, [sp, #0]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a0c      	ldr	r2, [pc, #48]	; (80015ac <main+0x2e8>)
 800157a:	2132      	movs	r1, #50	; 0x32
 800157c:	2064      	movs	r0, #100	; 0x64
 800157e:	f7ff fa79 	bl	8000a74 <ST7789_WriteString>
		ST7789_WriteString(100, 150, "PINTO", Font_16x26, WHITE, GREEN);
 8001582:	4b09      	ldr	r3, [pc, #36]	; (80015a8 <main+0x2e4>)
 8001584:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001588:	9202      	str	r2, [sp, #8]
 800158a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800158e:	9201      	str	r2, [sp, #4]
 8001590:	685a      	ldr	r2, [r3, #4]
 8001592:	9200      	str	r2, [sp, #0]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a06      	ldr	r2, [pc, #24]	; (80015b0 <main+0x2ec>)
 8001598:	2196      	movs	r1, #150	; 0x96
 800159a:	2064      	movs	r0, #100	; 0x64
 800159c:	f7ff fa6a 	bl	8000a74 <ST7789_WriteString>
		ST7789_WriteString(100, 50, "Bem vindo ao Jogo da memoria", Font_16x26, WHITE, GREEN);
 80015a0:	e7e0      	b.n	8001564 <main+0x2a0>
 80015a2:	bf00      	nop
 80015a4:	40010800 	.word	0x40010800
 80015a8:	20000010 	.word	0x20000010
 80015ac:	08002cc0 	.word	0x08002cc0
 80015b0:	08002ce0 	.word	0x08002ce0

080015b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b090      	sub	sp, #64	; 0x40
 80015b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015ba:	f107 0318 	add.w	r3, r7, #24
 80015be:	2228      	movs	r2, #40	; 0x28
 80015c0:	2100      	movs	r1, #0
 80015c2:	4618      	mov	r0, r3
 80015c4:	f001 fb0a 	bl	8002bdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015c8:	1d3b      	adds	r3, r7, #4
 80015ca:	2200      	movs	r2, #0
 80015cc:	601a      	str	r2, [r3, #0]
 80015ce:	605a      	str	r2, [r3, #4]
 80015d0:	609a      	str	r2, [r3, #8]
 80015d2:	60da      	str	r2, [r3, #12]
 80015d4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015d6:	2302      	movs	r3, #2
 80015d8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015da:	2301      	movs	r3, #1
 80015dc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015de:	2310      	movs	r3, #16
 80015e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015e2:	2302      	movs	r3, #2
 80015e4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80015e6:	2300      	movs	r3, #0
 80015e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80015ea:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80015ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015f0:	f107 0318 	add.w	r3, r7, #24
 80015f4:	4618      	mov	r0, r3
 80015f6:	f000 fc7d 	bl	8001ef4 <HAL_RCC_OscConfig>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001600:	f000 f8b0 	bl	8001764 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001604:	230f      	movs	r3, #15
 8001606:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001608:	2302      	movs	r3, #2
 800160a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800160c:	2300      	movs	r3, #0
 800160e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001610:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001614:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001616:	2300      	movs	r3, #0
 8001618:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800161a:	1d3b      	adds	r3, r7, #4
 800161c:	2102      	movs	r1, #2
 800161e:	4618      	mov	r0, r3
 8001620:	f000 fee8 	bl	80023f4 <HAL_RCC_ClockConfig>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800162a:	f000 f89b 	bl	8001764 <Error_Handler>
  }
}
 800162e:	bf00      	nop
 8001630:	3740      	adds	r7, #64	; 0x40
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
	...

08001638 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800163c:	4b17      	ldr	r3, [pc, #92]	; (800169c <MX_SPI1_Init+0x64>)
 800163e:	4a18      	ldr	r2, [pc, #96]	; (80016a0 <MX_SPI1_Init+0x68>)
 8001640:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001642:	4b16      	ldr	r3, [pc, #88]	; (800169c <MX_SPI1_Init+0x64>)
 8001644:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001648:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800164a:	4b14      	ldr	r3, [pc, #80]	; (800169c <MX_SPI1_Init+0x64>)
 800164c:	2200      	movs	r2, #0
 800164e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001650:	4b12      	ldr	r3, [pc, #72]	; (800169c <MX_SPI1_Init+0x64>)
 8001652:	2200      	movs	r2, #0
 8001654:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001656:	4b11      	ldr	r3, [pc, #68]	; (800169c <MX_SPI1_Init+0x64>)
 8001658:	2202      	movs	r2, #2
 800165a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800165c:	4b0f      	ldr	r3, [pc, #60]	; (800169c <MX_SPI1_Init+0x64>)
 800165e:	2200      	movs	r2, #0
 8001660:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001662:	4b0e      	ldr	r3, [pc, #56]	; (800169c <MX_SPI1_Init+0x64>)
 8001664:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001668:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800166a:	4b0c      	ldr	r3, [pc, #48]	; (800169c <MX_SPI1_Init+0x64>)
 800166c:	2208      	movs	r2, #8
 800166e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001670:	4b0a      	ldr	r3, [pc, #40]	; (800169c <MX_SPI1_Init+0x64>)
 8001672:	2200      	movs	r2, #0
 8001674:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001676:	4b09      	ldr	r3, [pc, #36]	; (800169c <MX_SPI1_Init+0x64>)
 8001678:	2200      	movs	r2, #0
 800167a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800167c:	4b07      	ldr	r3, [pc, #28]	; (800169c <MX_SPI1_Init+0x64>)
 800167e:	2200      	movs	r2, #0
 8001680:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001682:	4b06      	ldr	r3, [pc, #24]	; (800169c <MX_SPI1_Init+0x64>)
 8001684:	220a      	movs	r2, #10
 8001686:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001688:	4804      	ldr	r0, [pc, #16]	; (800169c <MX_SPI1_Init+0x64>)
 800168a:	f001 f81d 	bl	80026c8 <HAL_SPI_Init>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001694:	f000 f866 	bl	8001764 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001698:	bf00      	nop
 800169a:	bd80      	pop	{r7, pc}
 800169c:	20000040 	.word	0x20000040
 80016a0:	40013000 	.word	0x40013000

080016a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b086      	sub	sp, #24
 80016a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016aa:	f107 0308 	add.w	r3, r7, #8
 80016ae:	2200      	movs	r2, #0
 80016b0:	601a      	str	r2, [r3, #0]
 80016b2:	605a      	str	r2, [r3, #4]
 80016b4:	609a      	str	r2, [r3, #8]
 80016b6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b8:	4b27      	ldr	r3, [pc, #156]	; (8001758 <MX_GPIO_Init+0xb4>)
 80016ba:	699b      	ldr	r3, [r3, #24]
 80016bc:	4a26      	ldr	r2, [pc, #152]	; (8001758 <MX_GPIO_Init+0xb4>)
 80016be:	f043 0304 	orr.w	r3, r3, #4
 80016c2:	6193      	str	r3, [r2, #24]
 80016c4:	4b24      	ldr	r3, [pc, #144]	; (8001758 <MX_GPIO_Init+0xb4>)
 80016c6:	699b      	ldr	r3, [r3, #24]
 80016c8:	f003 0304 	and.w	r3, r3, #4
 80016cc:	607b      	str	r3, [r7, #4]
 80016ce:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016d0:	4b21      	ldr	r3, [pc, #132]	; (8001758 <MX_GPIO_Init+0xb4>)
 80016d2:	699b      	ldr	r3, [r3, #24]
 80016d4:	4a20      	ldr	r2, [pc, #128]	; (8001758 <MX_GPIO_Init+0xb4>)
 80016d6:	f043 0308 	orr.w	r3, r3, #8
 80016da:	6193      	str	r3, [r2, #24]
 80016dc:	4b1e      	ldr	r3, [pc, #120]	; (8001758 <MX_GPIO_Init+0xb4>)
 80016de:	699b      	ldr	r3, [r3, #24]
 80016e0:	f003 0308 	and.w	r3, r3, #8
 80016e4:	603b      	str	r3, [r7, #0]
 80016e6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ST7789_CS_GPIO_Port, ST7789_CS_Pin, GPIO_PIN_RESET);
 80016e8:	2200      	movs	r2, #0
 80016ea:	2110      	movs	r1, #16
 80016ec:	481b      	ldr	r0, [pc, #108]	; (800175c <MX_GPIO_Init+0xb8>)
 80016ee:	f000 fbe8 	bl	8001ec2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ST7789_DC_Pin|ST7789_RST_Pin, GPIO_PIN_RESET);
 80016f2:	2200      	movs	r2, #0
 80016f4:	2103      	movs	r1, #3
 80016f6:	481a      	ldr	r0, [pc, #104]	; (8001760 <MX_GPIO_Init+0xbc>)
 80016f8:	f000 fbe3 	bl	8001ec2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ST7789_CS_Pin */
  GPIO_InitStruct.Pin = ST7789_CS_Pin;
 80016fc:	2310      	movs	r3, #16
 80016fe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001700:	2301      	movs	r3, #1
 8001702:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001704:	2300      	movs	r3, #0
 8001706:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001708:	2302      	movs	r3, #2
 800170a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ST7789_CS_GPIO_Port, &GPIO_InitStruct);
 800170c:	f107 0308 	add.w	r3, r7, #8
 8001710:	4619      	mov	r1, r3
 8001712:	4812      	ldr	r0, [pc, #72]	; (800175c <MX_GPIO_Init+0xb8>)
 8001714:	f000 fa64 	bl	8001be0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ST7789_DC_Pin ST7789_RST_Pin */
  GPIO_InitStruct.Pin = ST7789_DC_Pin|ST7789_RST_Pin;
 8001718:	2303      	movs	r3, #3
 800171a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800171c:	2301      	movs	r3, #1
 800171e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001720:	2300      	movs	r3, #0
 8001722:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001724:	2302      	movs	r3, #2
 8001726:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001728:	f107 0308 	add.w	r3, r7, #8
 800172c:	4619      	mov	r1, r3
 800172e:	480c      	ldr	r0, [pc, #48]	; (8001760 <MX_GPIO_Init+0xbc>)
 8001730:	f000 fa56 	bl	8001be0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001734:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8001738:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800173a:	2300      	movs	r3, #0
 800173c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800173e:	2301      	movs	r3, #1
 8001740:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001742:	f107 0308 	add.w	r3, r7, #8
 8001746:	4619      	mov	r1, r3
 8001748:	4804      	ldr	r0, [pc, #16]	; (800175c <MX_GPIO_Init+0xb8>)
 800174a:	f000 fa49 	bl	8001be0 <HAL_GPIO_Init>

}
 800174e:	bf00      	nop
 8001750:	3718      	adds	r7, #24
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	40021000 	.word	0x40021000
 800175c:	40010800 	.word	0x40010800
 8001760:	40010c00 	.word	0x40010c00

08001764 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001768:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  ST7789_Test();
 800176a:	f7ff fc1b 	bl	8000fa4 <ST7789_Test>
 800176e:	e7fc      	b.n	800176a <Error_Handler+0x6>

08001770 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001770:	b480      	push	{r7}
 8001772:	b085      	sub	sp, #20
 8001774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001776:	4b15      	ldr	r3, [pc, #84]	; (80017cc <HAL_MspInit+0x5c>)
 8001778:	699b      	ldr	r3, [r3, #24]
 800177a:	4a14      	ldr	r2, [pc, #80]	; (80017cc <HAL_MspInit+0x5c>)
 800177c:	f043 0301 	orr.w	r3, r3, #1
 8001780:	6193      	str	r3, [r2, #24]
 8001782:	4b12      	ldr	r3, [pc, #72]	; (80017cc <HAL_MspInit+0x5c>)
 8001784:	699b      	ldr	r3, [r3, #24]
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	60bb      	str	r3, [r7, #8]
 800178c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800178e:	4b0f      	ldr	r3, [pc, #60]	; (80017cc <HAL_MspInit+0x5c>)
 8001790:	69db      	ldr	r3, [r3, #28]
 8001792:	4a0e      	ldr	r2, [pc, #56]	; (80017cc <HAL_MspInit+0x5c>)
 8001794:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001798:	61d3      	str	r3, [r2, #28]
 800179a:	4b0c      	ldr	r3, [pc, #48]	; (80017cc <HAL_MspInit+0x5c>)
 800179c:	69db      	ldr	r3, [r3, #28]
 800179e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a2:	607b      	str	r3, [r7, #4]
 80017a4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80017a6:	4b0a      	ldr	r3, [pc, #40]	; (80017d0 <HAL_MspInit+0x60>)
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	60fb      	str	r3, [r7, #12]
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80017b2:	60fb      	str	r3, [r7, #12]
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80017ba:	60fb      	str	r3, [r7, #12]
 80017bc:	4a04      	ldr	r2, [pc, #16]	; (80017d0 <HAL_MspInit+0x60>)
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017c2:	bf00      	nop
 80017c4:	3714      	adds	r7, #20
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bc80      	pop	{r7}
 80017ca:	4770      	bx	lr
 80017cc:	40021000 	.word	0x40021000
 80017d0:	40010000 	.word	0x40010000

080017d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b088      	sub	sp, #32
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017dc:	f107 0310 	add.w	r3, r7, #16
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	605a      	str	r2, [r3, #4]
 80017e6:	609a      	str	r2, [r3, #8]
 80017e8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a1b      	ldr	r2, [pc, #108]	; (800185c <HAL_SPI_MspInit+0x88>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d12f      	bne.n	8001854 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80017f4:	4b1a      	ldr	r3, [pc, #104]	; (8001860 <HAL_SPI_MspInit+0x8c>)
 80017f6:	699b      	ldr	r3, [r3, #24]
 80017f8:	4a19      	ldr	r2, [pc, #100]	; (8001860 <HAL_SPI_MspInit+0x8c>)
 80017fa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017fe:	6193      	str	r3, [r2, #24]
 8001800:	4b17      	ldr	r3, [pc, #92]	; (8001860 <HAL_SPI_MspInit+0x8c>)
 8001802:	699b      	ldr	r3, [r3, #24]
 8001804:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001808:	60fb      	str	r3, [r7, #12]
 800180a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800180c:	4b14      	ldr	r3, [pc, #80]	; (8001860 <HAL_SPI_MspInit+0x8c>)
 800180e:	699b      	ldr	r3, [r3, #24]
 8001810:	4a13      	ldr	r2, [pc, #76]	; (8001860 <HAL_SPI_MspInit+0x8c>)
 8001812:	f043 0304 	orr.w	r3, r3, #4
 8001816:	6193      	str	r3, [r2, #24]
 8001818:	4b11      	ldr	r3, [pc, #68]	; (8001860 <HAL_SPI_MspInit+0x8c>)
 800181a:	699b      	ldr	r3, [r3, #24]
 800181c:	f003 0304 	and.w	r3, r3, #4
 8001820:	60bb      	str	r3, [r7, #8]
 8001822:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001824:	23a0      	movs	r3, #160	; 0xa0
 8001826:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001828:	2302      	movs	r3, #2
 800182a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800182c:	2303      	movs	r3, #3
 800182e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001830:	f107 0310 	add.w	r3, r7, #16
 8001834:	4619      	mov	r1, r3
 8001836:	480b      	ldr	r0, [pc, #44]	; (8001864 <HAL_SPI_MspInit+0x90>)
 8001838:	f000 f9d2 	bl	8001be0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800183c:	2340      	movs	r3, #64	; 0x40
 800183e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001840:	2300      	movs	r3, #0
 8001842:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001844:	2300      	movs	r3, #0
 8001846:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001848:	f107 0310 	add.w	r3, r7, #16
 800184c:	4619      	mov	r1, r3
 800184e:	4805      	ldr	r0, [pc, #20]	; (8001864 <HAL_SPI_MspInit+0x90>)
 8001850:	f000 f9c6 	bl	8001be0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001854:	bf00      	nop
 8001856:	3720      	adds	r7, #32
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	40013000 	.word	0x40013000
 8001860:	40021000 	.word	0x40021000
 8001864:	40010800 	.word	0x40010800

08001868 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800186c:	e7fe      	b.n	800186c <NMI_Handler+0x4>

0800186e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800186e:	b480      	push	{r7}
 8001870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001872:	e7fe      	b.n	8001872 <HardFault_Handler+0x4>

08001874 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001878:	e7fe      	b.n	8001878 <MemManage_Handler+0x4>

0800187a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800187a:	b480      	push	{r7}
 800187c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800187e:	e7fe      	b.n	800187e <BusFault_Handler+0x4>

08001880 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001884:	e7fe      	b.n	8001884 <UsageFault_Handler+0x4>

08001886 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001886:	b480      	push	{r7}
 8001888:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800188a:	bf00      	nop
 800188c:	46bd      	mov	sp, r7
 800188e:	bc80      	pop	{r7}
 8001890:	4770      	bx	lr

08001892 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001892:	b480      	push	{r7}
 8001894:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001896:	bf00      	nop
 8001898:	46bd      	mov	sp, r7
 800189a:	bc80      	pop	{r7}
 800189c:	4770      	bx	lr

0800189e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800189e:	b480      	push	{r7}
 80018a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018a2:	bf00      	nop
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bc80      	pop	{r7}
 80018a8:	4770      	bx	lr

080018aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018aa:	b580      	push	{r7, lr}
 80018ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018ae:	f000 f875 	bl	800199c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018b2:	bf00      	nop
 80018b4:	bd80      	pop	{r7, pc}

080018b6 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80018b6:	b480      	push	{r7}
 80018b8:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018ba:	bf00      	nop
 80018bc:	46bd      	mov	sp, r7
 80018be:	bc80      	pop	{r7}
 80018c0:	4770      	bx	lr
	...

080018c4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018c4:	480c      	ldr	r0, [pc, #48]	; (80018f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018c6:	490d      	ldr	r1, [pc, #52]	; (80018fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018c8:	4a0d      	ldr	r2, [pc, #52]	; (8001900 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018cc:	e002      	b.n	80018d4 <LoopCopyDataInit>

080018ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018d2:	3304      	adds	r3, #4

080018d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018d8:	d3f9      	bcc.n	80018ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018da:	4a0a      	ldr	r2, [pc, #40]	; (8001904 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018dc:	4c0a      	ldr	r4, [pc, #40]	; (8001908 <LoopFillZerobss+0x22>)
  movs r3, #0
 80018de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018e0:	e001      	b.n	80018e6 <LoopFillZerobss>

080018e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018e4:	3204      	adds	r2, #4

080018e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018e8:	d3fb      	bcc.n	80018e2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80018ea:	f7ff ffe4 	bl	80018b6 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018ee:	f001 f951 	bl	8002b94 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80018f2:	f7ff fce7 	bl	80012c4 <main>
  bx lr
 80018f6:	4770      	bx	lr
  ldr r0, =_sdata
 80018f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018fc:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8001900:	0800d528 	.word	0x0800d528
  ldr r2, =_sbss
 8001904:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8001908:	2000009c 	.word	0x2000009c

0800190c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800190c:	e7fe      	b.n	800190c <ADC1_2_IRQHandler>
	...

08001910 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001914:	4b08      	ldr	r3, [pc, #32]	; (8001938 <HAL_Init+0x28>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a07      	ldr	r2, [pc, #28]	; (8001938 <HAL_Init+0x28>)
 800191a:	f043 0310 	orr.w	r3, r3, #16
 800191e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001920:	2003      	movs	r0, #3
 8001922:	f000 f929 	bl	8001b78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001926:	2000      	movs	r0, #0
 8001928:	f000 f808 	bl	800193c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800192c:	f7ff ff20 	bl	8001770 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001930:	2300      	movs	r3, #0
}
 8001932:	4618      	mov	r0, r3
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	40022000 	.word	0x40022000

0800193c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001944:	4b12      	ldr	r3, [pc, #72]	; (8001990 <HAL_InitTick+0x54>)
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	4b12      	ldr	r3, [pc, #72]	; (8001994 <HAL_InitTick+0x58>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	4619      	mov	r1, r3
 800194e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001952:	fbb3 f3f1 	udiv	r3, r3, r1
 8001956:	fbb2 f3f3 	udiv	r3, r2, r3
 800195a:	4618      	mov	r0, r3
 800195c:	f000 f933 	bl	8001bc6 <HAL_SYSTICK_Config>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e00e      	b.n	8001988 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2b0f      	cmp	r3, #15
 800196e:	d80a      	bhi.n	8001986 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001970:	2200      	movs	r2, #0
 8001972:	6879      	ldr	r1, [r7, #4]
 8001974:	f04f 30ff 	mov.w	r0, #4294967295
 8001978:	f000 f909 	bl	8001b8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800197c:	4a06      	ldr	r2, [pc, #24]	; (8001998 <HAL_InitTick+0x5c>)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001982:	2300      	movs	r3, #0
 8001984:	e000      	b.n	8001988 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
}
 8001988:	4618      	mov	r0, r3
 800198a:	3708      	adds	r7, #8
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	20000018 	.word	0x20000018
 8001994:	20000020 	.word	0x20000020
 8001998:	2000001c 	.word	0x2000001c

0800199c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019a0:	4b05      	ldr	r3, [pc, #20]	; (80019b8 <HAL_IncTick+0x1c>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	461a      	mov	r2, r3
 80019a6:	4b05      	ldr	r3, [pc, #20]	; (80019bc <HAL_IncTick+0x20>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4413      	add	r3, r2
 80019ac:	4a03      	ldr	r2, [pc, #12]	; (80019bc <HAL_IncTick+0x20>)
 80019ae:	6013      	str	r3, [r2, #0]
}
 80019b0:	bf00      	nop
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bc80      	pop	{r7}
 80019b6:	4770      	bx	lr
 80019b8:	20000020 	.word	0x20000020
 80019bc:	20000098 	.word	0x20000098

080019c0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  return uwTick;
 80019c4:	4b02      	ldr	r3, [pc, #8]	; (80019d0 <HAL_GetTick+0x10>)
 80019c6:	681b      	ldr	r3, [r3, #0]
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bc80      	pop	{r7}
 80019ce:	4770      	bx	lr
 80019d0:	20000098 	.word	0x20000098

080019d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019dc:	f7ff fff0 	bl	80019c0 <HAL_GetTick>
 80019e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019ec:	d005      	beq.n	80019fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019ee:	4b09      	ldr	r3, [pc, #36]	; (8001a14 <HAL_Delay+0x40>)
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	461a      	mov	r2, r3
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	4413      	add	r3, r2
 80019f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019fa:	bf00      	nop
 80019fc:	f7ff ffe0 	bl	80019c0 <HAL_GetTick>
 8001a00:	4602      	mov	r2, r0
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	68fa      	ldr	r2, [r7, #12]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d8f7      	bhi.n	80019fc <HAL_Delay+0x28>
  {
  }
}
 8001a0c:	bf00      	nop
 8001a0e:	3710      	adds	r7, #16
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	20000020 	.word	0x20000020

08001a18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b085      	sub	sp, #20
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	f003 0307 	and.w	r3, r3, #7
 8001a26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a28:	4b0c      	ldr	r3, [pc, #48]	; (8001a5c <__NVIC_SetPriorityGrouping+0x44>)
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a2e:	68ba      	ldr	r2, [r7, #8]
 8001a30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a34:	4013      	ands	r3, r2
 8001a36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a4a:	4a04      	ldr	r2, [pc, #16]	; (8001a5c <__NVIC_SetPriorityGrouping+0x44>)
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	60d3      	str	r3, [r2, #12]
}
 8001a50:	bf00      	nop
 8001a52:	3714      	adds	r7, #20
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bc80      	pop	{r7}
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	e000ed00 	.word	0xe000ed00

08001a60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a64:	4b04      	ldr	r3, [pc, #16]	; (8001a78 <__NVIC_GetPriorityGrouping+0x18>)
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	0a1b      	lsrs	r3, r3, #8
 8001a6a:	f003 0307 	and.w	r3, r3, #7
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bc80      	pop	{r7}
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	e000ed00 	.word	0xe000ed00

08001a7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	4603      	mov	r3, r0
 8001a84:	6039      	str	r1, [r7, #0]
 8001a86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	db0a      	blt.n	8001aa6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	b2da      	uxtb	r2, r3
 8001a94:	490c      	ldr	r1, [pc, #48]	; (8001ac8 <__NVIC_SetPriority+0x4c>)
 8001a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a9a:	0112      	lsls	r2, r2, #4
 8001a9c:	b2d2      	uxtb	r2, r2
 8001a9e:	440b      	add	r3, r1
 8001aa0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001aa4:	e00a      	b.n	8001abc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	b2da      	uxtb	r2, r3
 8001aaa:	4908      	ldr	r1, [pc, #32]	; (8001acc <__NVIC_SetPriority+0x50>)
 8001aac:	79fb      	ldrb	r3, [r7, #7]
 8001aae:	f003 030f 	and.w	r3, r3, #15
 8001ab2:	3b04      	subs	r3, #4
 8001ab4:	0112      	lsls	r2, r2, #4
 8001ab6:	b2d2      	uxtb	r2, r2
 8001ab8:	440b      	add	r3, r1
 8001aba:	761a      	strb	r2, [r3, #24]
}
 8001abc:	bf00      	nop
 8001abe:	370c      	adds	r7, #12
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bc80      	pop	{r7}
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	e000e100 	.word	0xe000e100
 8001acc:	e000ed00 	.word	0xe000ed00

08001ad0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b089      	sub	sp, #36	; 0x24
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	60f8      	str	r0, [r7, #12]
 8001ad8:	60b9      	str	r1, [r7, #8]
 8001ada:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	f003 0307 	and.w	r3, r3, #7
 8001ae2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	f1c3 0307 	rsb	r3, r3, #7
 8001aea:	2b04      	cmp	r3, #4
 8001aec:	bf28      	it	cs
 8001aee:	2304      	movcs	r3, #4
 8001af0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	3304      	adds	r3, #4
 8001af6:	2b06      	cmp	r3, #6
 8001af8:	d902      	bls.n	8001b00 <NVIC_EncodePriority+0x30>
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	3b03      	subs	r3, #3
 8001afe:	e000      	b.n	8001b02 <NVIC_EncodePriority+0x32>
 8001b00:	2300      	movs	r3, #0
 8001b02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b04:	f04f 32ff 	mov.w	r2, #4294967295
 8001b08:	69bb      	ldr	r3, [r7, #24]
 8001b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0e:	43da      	mvns	r2, r3
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	401a      	ands	r2, r3
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b18:	f04f 31ff 	mov.w	r1, #4294967295
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b22:	43d9      	mvns	r1, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b28:	4313      	orrs	r3, r2
         );
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3724      	adds	r7, #36	; 0x24
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bc80      	pop	{r7}
 8001b32:	4770      	bx	lr

08001b34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	3b01      	subs	r3, #1
 8001b40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b44:	d301      	bcc.n	8001b4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b46:	2301      	movs	r3, #1
 8001b48:	e00f      	b.n	8001b6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b4a:	4a0a      	ldr	r2, [pc, #40]	; (8001b74 <SysTick_Config+0x40>)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	3b01      	subs	r3, #1
 8001b50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b52:	210f      	movs	r1, #15
 8001b54:	f04f 30ff 	mov.w	r0, #4294967295
 8001b58:	f7ff ff90 	bl	8001a7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b5c:	4b05      	ldr	r3, [pc, #20]	; (8001b74 <SysTick_Config+0x40>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b62:	4b04      	ldr	r3, [pc, #16]	; (8001b74 <SysTick_Config+0x40>)
 8001b64:	2207      	movs	r2, #7
 8001b66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b68:	2300      	movs	r3, #0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	e000e010 	.word	0xe000e010

08001b78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f7ff ff49 	bl	8001a18 <__NVIC_SetPriorityGrouping>
}
 8001b86:	bf00      	nop
 8001b88:	3708      	adds	r7, #8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	b086      	sub	sp, #24
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	4603      	mov	r3, r0
 8001b96:	60b9      	str	r1, [r7, #8]
 8001b98:	607a      	str	r2, [r7, #4]
 8001b9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ba0:	f7ff ff5e 	bl	8001a60 <__NVIC_GetPriorityGrouping>
 8001ba4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ba6:	687a      	ldr	r2, [r7, #4]
 8001ba8:	68b9      	ldr	r1, [r7, #8]
 8001baa:	6978      	ldr	r0, [r7, #20]
 8001bac:	f7ff ff90 	bl	8001ad0 <NVIC_EncodePriority>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bb6:	4611      	mov	r1, r2
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7ff ff5f 	bl	8001a7c <__NVIC_SetPriority>
}
 8001bbe:	bf00      	nop
 8001bc0:	3718      	adds	r7, #24
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b082      	sub	sp, #8
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f7ff ffb0 	bl	8001b34 <SysTick_Config>
 8001bd4:	4603      	mov	r3, r0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
	...

08001be0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b08b      	sub	sp, #44	; 0x2c
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bea:	2300      	movs	r3, #0
 8001bec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bf2:	e127      	b.n	8001e44 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	69fa      	ldr	r2, [r7, #28]
 8001c04:	4013      	ands	r3, r2
 8001c06:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	f040 8116 	bne.w	8001e3e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	2b12      	cmp	r3, #18
 8001c18:	d034      	beq.n	8001c84 <HAL_GPIO_Init+0xa4>
 8001c1a:	2b12      	cmp	r3, #18
 8001c1c:	d80d      	bhi.n	8001c3a <HAL_GPIO_Init+0x5a>
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d02b      	beq.n	8001c7a <HAL_GPIO_Init+0x9a>
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d804      	bhi.n	8001c30 <HAL_GPIO_Init+0x50>
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d031      	beq.n	8001c8e <HAL_GPIO_Init+0xae>
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d01c      	beq.n	8001c68 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c2e:	e048      	b.n	8001cc2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001c30:	2b03      	cmp	r3, #3
 8001c32:	d043      	beq.n	8001cbc <HAL_GPIO_Init+0xdc>
 8001c34:	2b11      	cmp	r3, #17
 8001c36:	d01b      	beq.n	8001c70 <HAL_GPIO_Init+0x90>
          break;
 8001c38:	e043      	b.n	8001cc2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001c3a:	4a89      	ldr	r2, [pc, #548]	; (8001e60 <HAL_GPIO_Init+0x280>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d026      	beq.n	8001c8e <HAL_GPIO_Init+0xae>
 8001c40:	4a87      	ldr	r2, [pc, #540]	; (8001e60 <HAL_GPIO_Init+0x280>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d806      	bhi.n	8001c54 <HAL_GPIO_Init+0x74>
 8001c46:	4a87      	ldr	r2, [pc, #540]	; (8001e64 <HAL_GPIO_Init+0x284>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d020      	beq.n	8001c8e <HAL_GPIO_Init+0xae>
 8001c4c:	4a86      	ldr	r2, [pc, #536]	; (8001e68 <HAL_GPIO_Init+0x288>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d01d      	beq.n	8001c8e <HAL_GPIO_Init+0xae>
          break;
 8001c52:	e036      	b.n	8001cc2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001c54:	4a85      	ldr	r2, [pc, #532]	; (8001e6c <HAL_GPIO_Init+0x28c>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d019      	beq.n	8001c8e <HAL_GPIO_Init+0xae>
 8001c5a:	4a85      	ldr	r2, [pc, #532]	; (8001e70 <HAL_GPIO_Init+0x290>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d016      	beq.n	8001c8e <HAL_GPIO_Init+0xae>
 8001c60:	4a84      	ldr	r2, [pc, #528]	; (8001e74 <HAL_GPIO_Init+0x294>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d013      	beq.n	8001c8e <HAL_GPIO_Init+0xae>
          break;
 8001c66:	e02c      	b.n	8001cc2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	623b      	str	r3, [r7, #32]
          break;
 8001c6e:	e028      	b.n	8001cc2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	3304      	adds	r3, #4
 8001c76:	623b      	str	r3, [r7, #32]
          break;
 8001c78:	e023      	b.n	8001cc2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	3308      	adds	r3, #8
 8001c80:	623b      	str	r3, [r7, #32]
          break;
 8001c82:	e01e      	b.n	8001cc2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	330c      	adds	r3, #12
 8001c8a:	623b      	str	r3, [r7, #32]
          break;
 8001c8c:	e019      	b.n	8001cc2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d102      	bne.n	8001c9c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c96:	2304      	movs	r3, #4
 8001c98:	623b      	str	r3, [r7, #32]
          break;
 8001c9a:	e012      	b.n	8001cc2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d105      	bne.n	8001cb0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ca4:	2308      	movs	r3, #8
 8001ca6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	69fa      	ldr	r2, [r7, #28]
 8001cac:	611a      	str	r2, [r3, #16]
          break;
 8001cae:	e008      	b.n	8001cc2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cb0:	2308      	movs	r3, #8
 8001cb2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	69fa      	ldr	r2, [r7, #28]
 8001cb8:	615a      	str	r2, [r3, #20]
          break;
 8001cba:	e002      	b.n	8001cc2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	623b      	str	r3, [r7, #32]
          break;
 8001cc0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	2bff      	cmp	r3, #255	; 0xff
 8001cc6:	d801      	bhi.n	8001ccc <HAL_GPIO_Init+0xec>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	e001      	b.n	8001cd0 <HAL_GPIO_Init+0xf0>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	3304      	adds	r3, #4
 8001cd0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	2bff      	cmp	r3, #255	; 0xff
 8001cd6:	d802      	bhi.n	8001cde <HAL_GPIO_Init+0xfe>
 8001cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	e002      	b.n	8001ce4 <HAL_GPIO_Init+0x104>
 8001cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce0:	3b08      	subs	r3, #8
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	210f      	movs	r1, #15
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf2:	43db      	mvns	r3, r3
 8001cf4:	401a      	ands	r2, r3
 8001cf6:	6a39      	ldr	r1, [r7, #32]
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8001cfe:	431a      	orrs	r2, r3
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	f000 8096 	beq.w	8001e3e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d12:	4b59      	ldr	r3, [pc, #356]	; (8001e78 <HAL_GPIO_Init+0x298>)
 8001d14:	699b      	ldr	r3, [r3, #24]
 8001d16:	4a58      	ldr	r2, [pc, #352]	; (8001e78 <HAL_GPIO_Init+0x298>)
 8001d18:	f043 0301 	orr.w	r3, r3, #1
 8001d1c:	6193      	str	r3, [r2, #24]
 8001d1e:	4b56      	ldr	r3, [pc, #344]	; (8001e78 <HAL_GPIO_Init+0x298>)
 8001d20:	699b      	ldr	r3, [r3, #24]
 8001d22:	f003 0301 	and.w	r3, r3, #1
 8001d26:	60bb      	str	r3, [r7, #8]
 8001d28:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d2a:	4a54      	ldr	r2, [pc, #336]	; (8001e7c <HAL_GPIO_Init+0x29c>)
 8001d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2e:	089b      	lsrs	r3, r3, #2
 8001d30:	3302      	adds	r3, #2
 8001d32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d36:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3a:	f003 0303 	and.w	r3, r3, #3
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	220f      	movs	r2, #15
 8001d42:	fa02 f303 	lsl.w	r3, r2, r3
 8001d46:	43db      	mvns	r3, r3
 8001d48:	68fa      	ldr	r2, [r7, #12]
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4a4b      	ldr	r2, [pc, #300]	; (8001e80 <HAL_GPIO_Init+0x2a0>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d013      	beq.n	8001d7e <HAL_GPIO_Init+0x19e>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4a4a      	ldr	r2, [pc, #296]	; (8001e84 <HAL_GPIO_Init+0x2a4>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d00d      	beq.n	8001d7a <HAL_GPIO_Init+0x19a>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a49      	ldr	r2, [pc, #292]	; (8001e88 <HAL_GPIO_Init+0x2a8>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d007      	beq.n	8001d76 <HAL_GPIO_Init+0x196>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4a48      	ldr	r2, [pc, #288]	; (8001e8c <HAL_GPIO_Init+0x2ac>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d101      	bne.n	8001d72 <HAL_GPIO_Init+0x192>
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e006      	b.n	8001d80 <HAL_GPIO_Init+0x1a0>
 8001d72:	2304      	movs	r3, #4
 8001d74:	e004      	b.n	8001d80 <HAL_GPIO_Init+0x1a0>
 8001d76:	2302      	movs	r3, #2
 8001d78:	e002      	b.n	8001d80 <HAL_GPIO_Init+0x1a0>
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e000      	b.n	8001d80 <HAL_GPIO_Init+0x1a0>
 8001d7e:	2300      	movs	r3, #0
 8001d80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d82:	f002 0203 	and.w	r2, r2, #3
 8001d86:	0092      	lsls	r2, r2, #2
 8001d88:	4093      	lsls	r3, r2
 8001d8a:	68fa      	ldr	r2, [r7, #12]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d90:	493a      	ldr	r1, [pc, #232]	; (8001e7c <HAL_GPIO_Init+0x29c>)
 8001d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d94:	089b      	lsrs	r3, r3, #2
 8001d96:	3302      	adds	r3, #2
 8001d98:	68fa      	ldr	r2, [r7, #12]
 8001d9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d006      	beq.n	8001db8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001daa:	4b39      	ldr	r3, [pc, #228]	; (8001e90 <HAL_GPIO_Init+0x2b0>)
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	4938      	ldr	r1, [pc, #224]	; (8001e90 <HAL_GPIO_Init+0x2b0>)
 8001db0:	69bb      	ldr	r3, [r7, #24]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	600b      	str	r3, [r1, #0]
 8001db6:	e006      	b.n	8001dc6 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001db8:	4b35      	ldr	r3, [pc, #212]	; (8001e90 <HAL_GPIO_Init+0x2b0>)
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	69bb      	ldr	r3, [r7, #24]
 8001dbe:	43db      	mvns	r3, r3
 8001dc0:	4933      	ldr	r1, [pc, #204]	; (8001e90 <HAL_GPIO_Init+0x2b0>)
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d006      	beq.n	8001de0 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001dd2:	4b2f      	ldr	r3, [pc, #188]	; (8001e90 <HAL_GPIO_Init+0x2b0>)
 8001dd4:	685a      	ldr	r2, [r3, #4]
 8001dd6:	492e      	ldr	r1, [pc, #184]	; (8001e90 <HAL_GPIO_Init+0x2b0>)
 8001dd8:	69bb      	ldr	r3, [r7, #24]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	604b      	str	r3, [r1, #4]
 8001dde:	e006      	b.n	8001dee <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001de0:	4b2b      	ldr	r3, [pc, #172]	; (8001e90 <HAL_GPIO_Init+0x2b0>)
 8001de2:	685a      	ldr	r2, [r3, #4]
 8001de4:	69bb      	ldr	r3, [r7, #24]
 8001de6:	43db      	mvns	r3, r3
 8001de8:	4929      	ldr	r1, [pc, #164]	; (8001e90 <HAL_GPIO_Init+0x2b0>)
 8001dea:	4013      	ands	r3, r2
 8001dec:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d006      	beq.n	8001e08 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001dfa:	4b25      	ldr	r3, [pc, #148]	; (8001e90 <HAL_GPIO_Init+0x2b0>)
 8001dfc:	689a      	ldr	r2, [r3, #8]
 8001dfe:	4924      	ldr	r1, [pc, #144]	; (8001e90 <HAL_GPIO_Init+0x2b0>)
 8001e00:	69bb      	ldr	r3, [r7, #24]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	608b      	str	r3, [r1, #8]
 8001e06:	e006      	b.n	8001e16 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e08:	4b21      	ldr	r3, [pc, #132]	; (8001e90 <HAL_GPIO_Init+0x2b0>)
 8001e0a:	689a      	ldr	r2, [r3, #8]
 8001e0c:	69bb      	ldr	r3, [r7, #24]
 8001e0e:	43db      	mvns	r3, r3
 8001e10:	491f      	ldr	r1, [pc, #124]	; (8001e90 <HAL_GPIO_Init+0x2b0>)
 8001e12:	4013      	ands	r3, r2
 8001e14:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d006      	beq.n	8001e30 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e22:	4b1b      	ldr	r3, [pc, #108]	; (8001e90 <HAL_GPIO_Init+0x2b0>)
 8001e24:	68da      	ldr	r2, [r3, #12]
 8001e26:	491a      	ldr	r1, [pc, #104]	; (8001e90 <HAL_GPIO_Init+0x2b0>)
 8001e28:	69bb      	ldr	r3, [r7, #24]
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	60cb      	str	r3, [r1, #12]
 8001e2e:	e006      	b.n	8001e3e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e30:	4b17      	ldr	r3, [pc, #92]	; (8001e90 <HAL_GPIO_Init+0x2b0>)
 8001e32:	68da      	ldr	r2, [r3, #12]
 8001e34:	69bb      	ldr	r3, [r7, #24]
 8001e36:	43db      	mvns	r3, r3
 8001e38:	4915      	ldr	r1, [pc, #84]	; (8001e90 <HAL_GPIO_Init+0x2b0>)
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e40:	3301      	adds	r3, #1
 8001e42:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	f47f aed0 	bne.w	8001bf4 <HAL_GPIO_Init+0x14>
  }
}
 8001e54:	bf00      	nop
 8001e56:	372c      	adds	r7, #44	; 0x2c
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bc80      	pop	{r7}
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	10210000 	.word	0x10210000
 8001e64:	10110000 	.word	0x10110000
 8001e68:	10120000 	.word	0x10120000
 8001e6c:	10310000 	.word	0x10310000
 8001e70:	10320000 	.word	0x10320000
 8001e74:	10220000 	.word	0x10220000
 8001e78:	40021000 	.word	0x40021000
 8001e7c:	40010000 	.word	0x40010000
 8001e80:	40010800 	.word	0x40010800
 8001e84:	40010c00 	.word	0x40010c00
 8001e88:	40011000 	.word	0x40011000
 8001e8c:	40011400 	.word	0x40011400
 8001e90:	40010400 	.word	0x40010400

08001e94 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b085      	sub	sp, #20
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	689a      	ldr	r2, [r3, #8]
 8001ea4:	887b      	ldrh	r3, [r7, #2]
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d002      	beq.n	8001eb2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001eac:	2301      	movs	r3, #1
 8001eae:	73fb      	strb	r3, [r7, #15]
 8001eb0:	e001      	b.n	8001eb6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001eb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3714      	adds	r7, #20
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bc80      	pop	{r7}
 8001ec0:	4770      	bx	lr

08001ec2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ec2:	b480      	push	{r7}
 8001ec4:	b083      	sub	sp, #12
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
 8001eca:	460b      	mov	r3, r1
 8001ecc:	807b      	strh	r3, [r7, #2]
 8001ece:	4613      	mov	r3, r2
 8001ed0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ed2:	787b      	ldrb	r3, [r7, #1]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d003      	beq.n	8001ee0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ed8:	887a      	ldrh	r2, [r7, #2]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ede:	e003      	b.n	8001ee8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ee0:	887b      	ldrh	r3, [r7, #2]
 8001ee2:	041a      	lsls	r2, r3, #16
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	611a      	str	r2, [r3, #16]
}
 8001ee8:	bf00      	nop
 8001eea:	370c      	adds	r7, #12
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bc80      	pop	{r7}
 8001ef0:	4770      	bx	lr
	...

08001ef4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b086      	sub	sp, #24
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d101      	bne.n	8001f06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e26c      	b.n	80023e0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0301 	and.w	r3, r3, #1
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	f000 8087 	beq.w	8002022 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f14:	4b92      	ldr	r3, [pc, #584]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f003 030c 	and.w	r3, r3, #12
 8001f1c:	2b04      	cmp	r3, #4
 8001f1e:	d00c      	beq.n	8001f3a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f20:	4b8f      	ldr	r3, [pc, #572]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f003 030c 	and.w	r3, r3, #12
 8001f28:	2b08      	cmp	r3, #8
 8001f2a:	d112      	bne.n	8001f52 <HAL_RCC_OscConfig+0x5e>
 8001f2c:	4b8c      	ldr	r3, [pc, #560]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f38:	d10b      	bne.n	8001f52 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f3a:	4b89      	ldr	r3, [pc, #548]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d06c      	beq.n	8002020 <HAL_RCC_OscConfig+0x12c>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d168      	bne.n	8002020 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e246      	b.n	80023e0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f5a:	d106      	bne.n	8001f6a <HAL_RCC_OscConfig+0x76>
 8001f5c:	4b80      	ldr	r3, [pc, #512]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a7f      	ldr	r2, [pc, #508]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001f62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f66:	6013      	str	r3, [r2, #0]
 8001f68:	e02e      	b.n	8001fc8 <HAL_RCC_OscConfig+0xd4>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d10c      	bne.n	8001f8c <HAL_RCC_OscConfig+0x98>
 8001f72:	4b7b      	ldr	r3, [pc, #492]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a7a      	ldr	r2, [pc, #488]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001f78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f7c:	6013      	str	r3, [r2, #0]
 8001f7e:	4b78      	ldr	r3, [pc, #480]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a77      	ldr	r2, [pc, #476]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001f84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f88:	6013      	str	r3, [r2, #0]
 8001f8a:	e01d      	b.n	8001fc8 <HAL_RCC_OscConfig+0xd4>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f94:	d10c      	bne.n	8001fb0 <HAL_RCC_OscConfig+0xbc>
 8001f96:	4b72      	ldr	r3, [pc, #456]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a71      	ldr	r2, [pc, #452]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001f9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fa0:	6013      	str	r3, [r2, #0]
 8001fa2:	4b6f      	ldr	r3, [pc, #444]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a6e      	ldr	r2, [pc, #440]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001fa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fac:	6013      	str	r3, [r2, #0]
 8001fae:	e00b      	b.n	8001fc8 <HAL_RCC_OscConfig+0xd4>
 8001fb0:	4b6b      	ldr	r3, [pc, #428]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a6a      	ldr	r2, [pc, #424]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001fb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fba:	6013      	str	r3, [r2, #0]
 8001fbc:	4b68      	ldr	r3, [pc, #416]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a67      	ldr	r2, [pc, #412]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001fc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fc6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d013      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd0:	f7ff fcf6 	bl	80019c0 <HAL_GetTick>
 8001fd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fd6:	e008      	b.n	8001fea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fd8:	f7ff fcf2 	bl	80019c0 <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	2b64      	cmp	r3, #100	; 0x64
 8001fe4:	d901      	bls.n	8001fea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e1fa      	b.n	80023e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fea:	4b5d      	ldr	r3, [pc, #372]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d0f0      	beq.n	8001fd8 <HAL_RCC_OscConfig+0xe4>
 8001ff6:	e014      	b.n	8002022 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff8:	f7ff fce2 	bl	80019c0 <HAL_GetTick>
 8001ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ffe:	e008      	b.n	8002012 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002000:	f7ff fcde 	bl	80019c0 <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	2b64      	cmp	r3, #100	; 0x64
 800200c:	d901      	bls.n	8002012 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e1e6      	b.n	80023e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002012:	4b53      	ldr	r3, [pc, #332]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d1f0      	bne.n	8002000 <HAL_RCC_OscConfig+0x10c>
 800201e:	e000      	b.n	8002022 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002020:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0302 	and.w	r3, r3, #2
 800202a:	2b00      	cmp	r3, #0
 800202c:	d063      	beq.n	80020f6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800202e:	4b4c      	ldr	r3, [pc, #304]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f003 030c 	and.w	r3, r3, #12
 8002036:	2b00      	cmp	r3, #0
 8002038:	d00b      	beq.n	8002052 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800203a:	4b49      	ldr	r3, [pc, #292]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f003 030c 	and.w	r3, r3, #12
 8002042:	2b08      	cmp	r3, #8
 8002044:	d11c      	bne.n	8002080 <HAL_RCC_OscConfig+0x18c>
 8002046:	4b46      	ldr	r3, [pc, #280]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d116      	bne.n	8002080 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002052:	4b43      	ldr	r3, [pc, #268]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0302 	and.w	r3, r3, #2
 800205a:	2b00      	cmp	r3, #0
 800205c:	d005      	beq.n	800206a <HAL_RCC_OscConfig+0x176>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	691b      	ldr	r3, [r3, #16]
 8002062:	2b01      	cmp	r3, #1
 8002064:	d001      	beq.n	800206a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e1ba      	b.n	80023e0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800206a:	4b3d      	ldr	r3, [pc, #244]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	695b      	ldr	r3, [r3, #20]
 8002076:	00db      	lsls	r3, r3, #3
 8002078:	4939      	ldr	r1, [pc, #228]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 800207a:	4313      	orrs	r3, r2
 800207c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800207e:	e03a      	b.n	80020f6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	691b      	ldr	r3, [r3, #16]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d020      	beq.n	80020ca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002088:	4b36      	ldr	r3, [pc, #216]	; (8002164 <HAL_RCC_OscConfig+0x270>)
 800208a:	2201      	movs	r2, #1
 800208c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800208e:	f7ff fc97 	bl	80019c0 <HAL_GetTick>
 8002092:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002094:	e008      	b.n	80020a8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002096:	f7ff fc93 	bl	80019c0 <HAL_GetTick>
 800209a:	4602      	mov	r2, r0
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d901      	bls.n	80020a8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80020a4:	2303      	movs	r3, #3
 80020a6:	e19b      	b.n	80023e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020a8:	4b2d      	ldr	r3, [pc, #180]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0302 	and.w	r3, r3, #2
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d0f0      	beq.n	8002096 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020b4:	4b2a      	ldr	r3, [pc, #168]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	695b      	ldr	r3, [r3, #20]
 80020c0:	00db      	lsls	r3, r3, #3
 80020c2:	4927      	ldr	r1, [pc, #156]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 80020c4:	4313      	orrs	r3, r2
 80020c6:	600b      	str	r3, [r1, #0]
 80020c8:	e015      	b.n	80020f6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020ca:	4b26      	ldr	r3, [pc, #152]	; (8002164 <HAL_RCC_OscConfig+0x270>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d0:	f7ff fc76 	bl	80019c0 <HAL_GetTick>
 80020d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020d6:	e008      	b.n	80020ea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020d8:	f7ff fc72 	bl	80019c0 <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e17a      	b.n	80023e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020ea:	4b1d      	ldr	r3, [pc, #116]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0302 	and.w	r3, r3, #2
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d1f0      	bne.n	80020d8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0308 	and.w	r3, r3, #8
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d03a      	beq.n	8002178 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	699b      	ldr	r3, [r3, #24]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d019      	beq.n	800213e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800210a:	4b17      	ldr	r3, [pc, #92]	; (8002168 <HAL_RCC_OscConfig+0x274>)
 800210c:	2201      	movs	r2, #1
 800210e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002110:	f7ff fc56 	bl	80019c0 <HAL_GetTick>
 8002114:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002116:	e008      	b.n	800212a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002118:	f7ff fc52 	bl	80019c0 <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	2b02      	cmp	r3, #2
 8002124:	d901      	bls.n	800212a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	e15a      	b.n	80023e0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800212a:	4b0d      	ldr	r3, [pc, #52]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 800212c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212e:	f003 0302 	and.w	r3, r3, #2
 8002132:	2b00      	cmp	r3, #0
 8002134:	d0f0      	beq.n	8002118 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002136:	2001      	movs	r0, #1
 8002138:	f000 faa8 	bl	800268c <RCC_Delay>
 800213c:	e01c      	b.n	8002178 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800213e:	4b0a      	ldr	r3, [pc, #40]	; (8002168 <HAL_RCC_OscConfig+0x274>)
 8002140:	2200      	movs	r2, #0
 8002142:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002144:	f7ff fc3c 	bl	80019c0 <HAL_GetTick>
 8002148:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800214a:	e00f      	b.n	800216c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800214c:	f7ff fc38 	bl	80019c0 <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	2b02      	cmp	r3, #2
 8002158:	d908      	bls.n	800216c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e140      	b.n	80023e0 <HAL_RCC_OscConfig+0x4ec>
 800215e:	bf00      	nop
 8002160:	40021000 	.word	0x40021000
 8002164:	42420000 	.word	0x42420000
 8002168:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800216c:	4b9e      	ldr	r3, [pc, #632]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 800216e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002170:	f003 0302 	and.w	r3, r3, #2
 8002174:	2b00      	cmp	r3, #0
 8002176:	d1e9      	bne.n	800214c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0304 	and.w	r3, r3, #4
 8002180:	2b00      	cmp	r3, #0
 8002182:	f000 80a6 	beq.w	80022d2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002186:	2300      	movs	r3, #0
 8002188:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800218a:	4b97      	ldr	r3, [pc, #604]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 800218c:	69db      	ldr	r3, [r3, #28]
 800218e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d10d      	bne.n	80021b2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002196:	4b94      	ldr	r3, [pc, #592]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 8002198:	69db      	ldr	r3, [r3, #28]
 800219a:	4a93      	ldr	r2, [pc, #588]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 800219c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021a0:	61d3      	str	r3, [r2, #28]
 80021a2:	4b91      	ldr	r3, [pc, #580]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 80021a4:	69db      	ldr	r3, [r3, #28]
 80021a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021aa:	60bb      	str	r3, [r7, #8]
 80021ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021ae:	2301      	movs	r3, #1
 80021b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021b2:	4b8e      	ldr	r3, [pc, #568]	; (80023ec <HAL_RCC_OscConfig+0x4f8>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d118      	bne.n	80021f0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021be:	4b8b      	ldr	r3, [pc, #556]	; (80023ec <HAL_RCC_OscConfig+0x4f8>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a8a      	ldr	r2, [pc, #552]	; (80023ec <HAL_RCC_OscConfig+0x4f8>)
 80021c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021ca:	f7ff fbf9 	bl	80019c0 <HAL_GetTick>
 80021ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021d0:	e008      	b.n	80021e4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021d2:	f7ff fbf5 	bl	80019c0 <HAL_GetTick>
 80021d6:	4602      	mov	r2, r0
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	2b64      	cmp	r3, #100	; 0x64
 80021de:	d901      	bls.n	80021e4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80021e0:	2303      	movs	r3, #3
 80021e2:	e0fd      	b.n	80023e0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021e4:	4b81      	ldr	r3, [pc, #516]	; (80023ec <HAL_RCC_OscConfig+0x4f8>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d0f0      	beq.n	80021d2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d106      	bne.n	8002206 <HAL_RCC_OscConfig+0x312>
 80021f8:	4b7b      	ldr	r3, [pc, #492]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 80021fa:	6a1b      	ldr	r3, [r3, #32]
 80021fc:	4a7a      	ldr	r2, [pc, #488]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 80021fe:	f043 0301 	orr.w	r3, r3, #1
 8002202:	6213      	str	r3, [r2, #32]
 8002204:	e02d      	b.n	8002262 <HAL_RCC_OscConfig+0x36e>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	68db      	ldr	r3, [r3, #12]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d10c      	bne.n	8002228 <HAL_RCC_OscConfig+0x334>
 800220e:	4b76      	ldr	r3, [pc, #472]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 8002210:	6a1b      	ldr	r3, [r3, #32]
 8002212:	4a75      	ldr	r2, [pc, #468]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 8002214:	f023 0301 	bic.w	r3, r3, #1
 8002218:	6213      	str	r3, [r2, #32]
 800221a:	4b73      	ldr	r3, [pc, #460]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 800221c:	6a1b      	ldr	r3, [r3, #32]
 800221e:	4a72      	ldr	r2, [pc, #456]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 8002220:	f023 0304 	bic.w	r3, r3, #4
 8002224:	6213      	str	r3, [r2, #32]
 8002226:	e01c      	b.n	8002262 <HAL_RCC_OscConfig+0x36e>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	2b05      	cmp	r3, #5
 800222e:	d10c      	bne.n	800224a <HAL_RCC_OscConfig+0x356>
 8002230:	4b6d      	ldr	r3, [pc, #436]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 8002232:	6a1b      	ldr	r3, [r3, #32]
 8002234:	4a6c      	ldr	r2, [pc, #432]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 8002236:	f043 0304 	orr.w	r3, r3, #4
 800223a:	6213      	str	r3, [r2, #32]
 800223c:	4b6a      	ldr	r3, [pc, #424]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 800223e:	6a1b      	ldr	r3, [r3, #32]
 8002240:	4a69      	ldr	r2, [pc, #420]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 8002242:	f043 0301 	orr.w	r3, r3, #1
 8002246:	6213      	str	r3, [r2, #32]
 8002248:	e00b      	b.n	8002262 <HAL_RCC_OscConfig+0x36e>
 800224a:	4b67      	ldr	r3, [pc, #412]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 800224c:	6a1b      	ldr	r3, [r3, #32]
 800224e:	4a66      	ldr	r2, [pc, #408]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 8002250:	f023 0301 	bic.w	r3, r3, #1
 8002254:	6213      	str	r3, [r2, #32]
 8002256:	4b64      	ldr	r3, [pc, #400]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 8002258:	6a1b      	ldr	r3, [r3, #32]
 800225a:	4a63      	ldr	r2, [pc, #396]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 800225c:	f023 0304 	bic.w	r3, r3, #4
 8002260:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d015      	beq.n	8002296 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800226a:	f7ff fba9 	bl	80019c0 <HAL_GetTick>
 800226e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002270:	e00a      	b.n	8002288 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002272:	f7ff fba5 	bl	80019c0 <HAL_GetTick>
 8002276:	4602      	mov	r2, r0
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002280:	4293      	cmp	r3, r2
 8002282:	d901      	bls.n	8002288 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002284:	2303      	movs	r3, #3
 8002286:	e0ab      	b.n	80023e0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002288:	4b57      	ldr	r3, [pc, #348]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 800228a:	6a1b      	ldr	r3, [r3, #32]
 800228c:	f003 0302 	and.w	r3, r3, #2
 8002290:	2b00      	cmp	r3, #0
 8002292:	d0ee      	beq.n	8002272 <HAL_RCC_OscConfig+0x37e>
 8002294:	e014      	b.n	80022c0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002296:	f7ff fb93 	bl	80019c0 <HAL_GetTick>
 800229a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800229c:	e00a      	b.n	80022b4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800229e:	f7ff fb8f 	bl	80019c0 <HAL_GetTick>
 80022a2:	4602      	mov	r2, r0
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d901      	bls.n	80022b4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	e095      	b.n	80023e0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022b4:	4b4c      	ldr	r3, [pc, #304]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 80022b6:	6a1b      	ldr	r3, [r3, #32]
 80022b8:	f003 0302 	and.w	r3, r3, #2
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d1ee      	bne.n	800229e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80022c0:	7dfb      	ldrb	r3, [r7, #23]
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d105      	bne.n	80022d2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022c6:	4b48      	ldr	r3, [pc, #288]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 80022c8:	69db      	ldr	r3, [r3, #28]
 80022ca:	4a47      	ldr	r2, [pc, #284]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 80022cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022d0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	69db      	ldr	r3, [r3, #28]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	f000 8081 	beq.w	80023de <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022dc:	4b42      	ldr	r3, [pc, #264]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f003 030c 	and.w	r3, r3, #12
 80022e4:	2b08      	cmp	r3, #8
 80022e6:	d061      	beq.n	80023ac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	69db      	ldr	r3, [r3, #28]
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d146      	bne.n	800237e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022f0:	4b3f      	ldr	r3, [pc, #252]	; (80023f0 <HAL_RCC_OscConfig+0x4fc>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f6:	f7ff fb63 	bl	80019c0 <HAL_GetTick>
 80022fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022fc:	e008      	b.n	8002310 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022fe:	f7ff fb5f 	bl	80019c0 <HAL_GetTick>
 8002302:	4602      	mov	r2, r0
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	2b02      	cmp	r3, #2
 800230a:	d901      	bls.n	8002310 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800230c:	2303      	movs	r3, #3
 800230e:	e067      	b.n	80023e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002310:	4b35      	ldr	r3, [pc, #212]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002318:	2b00      	cmp	r3, #0
 800231a:	d1f0      	bne.n	80022fe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6a1b      	ldr	r3, [r3, #32]
 8002320:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002324:	d108      	bne.n	8002338 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002326:	4b30      	ldr	r3, [pc, #192]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	492d      	ldr	r1, [pc, #180]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 8002334:	4313      	orrs	r3, r2
 8002336:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002338:	4b2b      	ldr	r3, [pc, #172]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6a19      	ldr	r1, [r3, #32]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002348:	430b      	orrs	r3, r1
 800234a:	4927      	ldr	r1, [pc, #156]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 800234c:	4313      	orrs	r3, r2
 800234e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002350:	4b27      	ldr	r3, [pc, #156]	; (80023f0 <HAL_RCC_OscConfig+0x4fc>)
 8002352:	2201      	movs	r2, #1
 8002354:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002356:	f7ff fb33 	bl	80019c0 <HAL_GetTick>
 800235a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800235c:	e008      	b.n	8002370 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800235e:	f7ff fb2f 	bl	80019c0 <HAL_GetTick>
 8002362:	4602      	mov	r2, r0
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	2b02      	cmp	r3, #2
 800236a:	d901      	bls.n	8002370 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	e037      	b.n	80023e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002370:	4b1d      	ldr	r3, [pc, #116]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d0f0      	beq.n	800235e <HAL_RCC_OscConfig+0x46a>
 800237c:	e02f      	b.n	80023de <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800237e:	4b1c      	ldr	r3, [pc, #112]	; (80023f0 <HAL_RCC_OscConfig+0x4fc>)
 8002380:	2200      	movs	r2, #0
 8002382:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002384:	f7ff fb1c 	bl	80019c0 <HAL_GetTick>
 8002388:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800238a:	e008      	b.n	800239e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800238c:	f7ff fb18 	bl	80019c0 <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	2b02      	cmp	r3, #2
 8002398:	d901      	bls.n	800239e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e020      	b.n	80023e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800239e:	4b12      	ldr	r3, [pc, #72]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d1f0      	bne.n	800238c <HAL_RCC_OscConfig+0x498>
 80023aa:	e018      	b.n	80023de <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	69db      	ldr	r3, [r3, #28]
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d101      	bne.n	80023b8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e013      	b.n	80023e0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80023b8:	4b0b      	ldr	r3, [pc, #44]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6a1b      	ldr	r3, [r3, #32]
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d106      	bne.n	80023da <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d001      	beq.n	80023de <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e000      	b.n	80023e0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80023de:	2300      	movs	r3, #0
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3718      	adds	r7, #24
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	40021000 	.word	0x40021000
 80023ec:	40007000 	.word	0x40007000
 80023f0:	42420060 	.word	0x42420060

080023f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d101      	bne.n	8002408 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e0d0      	b.n	80025aa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002408:	4b6a      	ldr	r3, [pc, #424]	; (80025b4 <HAL_RCC_ClockConfig+0x1c0>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0307 	and.w	r3, r3, #7
 8002410:	683a      	ldr	r2, [r7, #0]
 8002412:	429a      	cmp	r2, r3
 8002414:	d910      	bls.n	8002438 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002416:	4b67      	ldr	r3, [pc, #412]	; (80025b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f023 0207 	bic.w	r2, r3, #7
 800241e:	4965      	ldr	r1, [pc, #404]	; (80025b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	4313      	orrs	r3, r2
 8002424:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002426:	4b63      	ldr	r3, [pc, #396]	; (80025b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0307 	and.w	r3, r3, #7
 800242e:	683a      	ldr	r2, [r7, #0]
 8002430:	429a      	cmp	r2, r3
 8002432:	d001      	beq.n	8002438 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e0b8      	b.n	80025aa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0302 	and.w	r3, r3, #2
 8002440:	2b00      	cmp	r3, #0
 8002442:	d020      	beq.n	8002486 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0304 	and.w	r3, r3, #4
 800244c:	2b00      	cmp	r3, #0
 800244e:	d005      	beq.n	800245c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002450:	4b59      	ldr	r3, [pc, #356]	; (80025b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	4a58      	ldr	r2, [pc, #352]	; (80025b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002456:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800245a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0308 	and.w	r3, r3, #8
 8002464:	2b00      	cmp	r3, #0
 8002466:	d005      	beq.n	8002474 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002468:	4b53      	ldr	r3, [pc, #332]	; (80025b8 <HAL_RCC_ClockConfig+0x1c4>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	4a52      	ldr	r2, [pc, #328]	; (80025b8 <HAL_RCC_ClockConfig+0x1c4>)
 800246e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002472:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002474:	4b50      	ldr	r3, [pc, #320]	; (80025b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	494d      	ldr	r1, [pc, #308]	; (80025b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002482:	4313      	orrs	r3, r2
 8002484:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	2b00      	cmp	r3, #0
 8002490:	d040      	beq.n	8002514 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	2b01      	cmp	r3, #1
 8002498:	d107      	bne.n	80024aa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800249a:	4b47      	ldr	r3, [pc, #284]	; (80025b8 <HAL_RCC_ClockConfig+0x1c4>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d115      	bne.n	80024d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e07f      	b.n	80025aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d107      	bne.n	80024c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024b2:	4b41      	ldr	r3, [pc, #260]	; (80025b8 <HAL_RCC_ClockConfig+0x1c4>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d109      	bne.n	80024d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e073      	b.n	80025aa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024c2:	4b3d      	ldr	r3, [pc, #244]	; (80025b8 <HAL_RCC_ClockConfig+0x1c4>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0302 	and.w	r3, r3, #2
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d101      	bne.n	80024d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e06b      	b.n	80025aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024d2:	4b39      	ldr	r3, [pc, #228]	; (80025b8 <HAL_RCC_ClockConfig+0x1c4>)
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f023 0203 	bic.w	r2, r3, #3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	4936      	ldr	r1, [pc, #216]	; (80025b8 <HAL_RCC_ClockConfig+0x1c4>)
 80024e0:	4313      	orrs	r3, r2
 80024e2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024e4:	f7ff fa6c 	bl	80019c0 <HAL_GetTick>
 80024e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ea:	e00a      	b.n	8002502 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024ec:	f7ff fa68 	bl	80019c0 <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d901      	bls.n	8002502 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e053      	b.n	80025aa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002502:	4b2d      	ldr	r3, [pc, #180]	; (80025b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f003 020c 	and.w	r2, r3, #12
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	429a      	cmp	r2, r3
 8002512:	d1eb      	bne.n	80024ec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002514:	4b27      	ldr	r3, [pc, #156]	; (80025b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0307 	and.w	r3, r3, #7
 800251c:	683a      	ldr	r2, [r7, #0]
 800251e:	429a      	cmp	r2, r3
 8002520:	d210      	bcs.n	8002544 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002522:	4b24      	ldr	r3, [pc, #144]	; (80025b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f023 0207 	bic.w	r2, r3, #7
 800252a:	4922      	ldr	r1, [pc, #136]	; (80025b4 <HAL_RCC_ClockConfig+0x1c0>)
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	4313      	orrs	r3, r2
 8002530:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002532:	4b20      	ldr	r3, [pc, #128]	; (80025b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0307 	and.w	r3, r3, #7
 800253a:	683a      	ldr	r2, [r7, #0]
 800253c:	429a      	cmp	r2, r3
 800253e:	d001      	beq.n	8002544 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e032      	b.n	80025aa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0304 	and.w	r3, r3, #4
 800254c:	2b00      	cmp	r3, #0
 800254e:	d008      	beq.n	8002562 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002550:	4b19      	ldr	r3, [pc, #100]	; (80025b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	4916      	ldr	r1, [pc, #88]	; (80025b8 <HAL_RCC_ClockConfig+0x1c4>)
 800255e:	4313      	orrs	r3, r2
 8002560:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0308 	and.w	r3, r3, #8
 800256a:	2b00      	cmp	r3, #0
 800256c:	d009      	beq.n	8002582 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800256e:	4b12      	ldr	r3, [pc, #72]	; (80025b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	691b      	ldr	r3, [r3, #16]
 800257a:	00db      	lsls	r3, r3, #3
 800257c:	490e      	ldr	r1, [pc, #56]	; (80025b8 <HAL_RCC_ClockConfig+0x1c4>)
 800257e:	4313      	orrs	r3, r2
 8002580:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002582:	f000 f821 	bl	80025c8 <HAL_RCC_GetSysClockFreq>
 8002586:	4601      	mov	r1, r0
 8002588:	4b0b      	ldr	r3, [pc, #44]	; (80025b8 <HAL_RCC_ClockConfig+0x1c4>)
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	091b      	lsrs	r3, r3, #4
 800258e:	f003 030f 	and.w	r3, r3, #15
 8002592:	4a0a      	ldr	r2, [pc, #40]	; (80025bc <HAL_RCC_ClockConfig+0x1c8>)
 8002594:	5cd3      	ldrb	r3, [r2, r3]
 8002596:	fa21 f303 	lsr.w	r3, r1, r3
 800259a:	4a09      	ldr	r2, [pc, #36]	; (80025c0 <HAL_RCC_ClockConfig+0x1cc>)
 800259c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800259e:	4b09      	ldr	r3, [pc, #36]	; (80025c4 <HAL_RCC_ClockConfig+0x1d0>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7ff f9ca 	bl	800193c <HAL_InitTick>

  return HAL_OK;
 80025a8:	2300      	movs	r3, #0
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3710      	adds	r7, #16
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	40022000 	.word	0x40022000
 80025b8:	40021000 	.word	0x40021000
 80025bc:	0800d510 	.word	0x0800d510
 80025c0:	20000018 	.word	0x20000018
 80025c4:	2000001c 	.word	0x2000001c

080025c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025c8:	b490      	push	{r4, r7}
 80025ca:	b08a      	sub	sp, #40	; 0x28
 80025cc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80025ce:	4b2a      	ldr	r3, [pc, #168]	; (8002678 <HAL_RCC_GetSysClockFreq+0xb0>)
 80025d0:	1d3c      	adds	r4, r7, #4
 80025d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80025d8:	4b28      	ldr	r3, [pc, #160]	; (800267c <HAL_RCC_GetSysClockFreq+0xb4>)
 80025da:	881b      	ldrh	r3, [r3, #0]
 80025dc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80025de:	2300      	movs	r3, #0
 80025e0:	61fb      	str	r3, [r7, #28]
 80025e2:	2300      	movs	r3, #0
 80025e4:	61bb      	str	r3, [r7, #24]
 80025e6:	2300      	movs	r3, #0
 80025e8:	627b      	str	r3, [r7, #36]	; 0x24
 80025ea:	2300      	movs	r3, #0
 80025ec:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80025ee:	2300      	movs	r3, #0
 80025f0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80025f2:	4b23      	ldr	r3, [pc, #140]	; (8002680 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	f003 030c 	and.w	r3, r3, #12
 80025fe:	2b04      	cmp	r3, #4
 8002600:	d002      	beq.n	8002608 <HAL_RCC_GetSysClockFreq+0x40>
 8002602:	2b08      	cmp	r3, #8
 8002604:	d003      	beq.n	800260e <HAL_RCC_GetSysClockFreq+0x46>
 8002606:	e02d      	b.n	8002664 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002608:	4b1e      	ldr	r3, [pc, #120]	; (8002684 <HAL_RCC_GetSysClockFreq+0xbc>)
 800260a:	623b      	str	r3, [r7, #32]
      break;
 800260c:	e02d      	b.n	800266a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	0c9b      	lsrs	r3, r3, #18
 8002612:	f003 030f 	and.w	r3, r3, #15
 8002616:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800261a:	4413      	add	r3, r2
 800261c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002620:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d013      	beq.n	8002654 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800262c:	4b14      	ldr	r3, [pc, #80]	; (8002680 <HAL_RCC_GetSysClockFreq+0xb8>)
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	0c5b      	lsrs	r3, r3, #17
 8002632:	f003 0301 	and.w	r3, r3, #1
 8002636:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800263a:	4413      	add	r3, r2
 800263c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002640:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	4a0f      	ldr	r2, [pc, #60]	; (8002684 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002646:	fb02 f203 	mul.w	r2, r2, r3
 800264a:	69bb      	ldr	r3, [r7, #24]
 800264c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002650:	627b      	str	r3, [r7, #36]	; 0x24
 8002652:	e004      	b.n	800265e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	4a0c      	ldr	r2, [pc, #48]	; (8002688 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002658:	fb02 f303 	mul.w	r3, r2, r3
 800265c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800265e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002660:	623b      	str	r3, [r7, #32]
      break;
 8002662:	e002      	b.n	800266a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002664:	4b07      	ldr	r3, [pc, #28]	; (8002684 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002666:	623b      	str	r3, [r7, #32]
      break;
 8002668:	bf00      	nop
    }
  }
  return sysclockfreq;
 800266a:	6a3b      	ldr	r3, [r7, #32]
}
 800266c:	4618      	mov	r0, r3
 800266e:	3728      	adds	r7, #40	; 0x28
 8002670:	46bd      	mov	sp, r7
 8002672:	bc90      	pop	{r4, r7}
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop
 8002678:	08002ce8 	.word	0x08002ce8
 800267c:	08002cf8 	.word	0x08002cf8
 8002680:	40021000 	.word	0x40021000
 8002684:	007a1200 	.word	0x007a1200
 8002688:	003d0900 	.word	0x003d0900

0800268c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800268c:	b480      	push	{r7}
 800268e:	b085      	sub	sp, #20
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002694:	4b0a      	ldr	r3, [pc, #40]	; (80026c0 <RCC_Delay+0x34>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a0a      	ldr	r2, [pc, #40]	; (80026c4 <RCC_Delay+0x38>)
 800269a:	fba2 2303 	umull	r2, r3, r2, r3
 800269e:	0a5b      	lsrs	r3, r3, #9
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	fb02 f303 	mul.w	r3, r2, r3
 80026a6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80026a8:	bf00      	nop
  }
  while (Delay --);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	1e5a      	subs	r2, r3, #1
 80026ae:	60fa      	str	r2, [r7, #12]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d1f9      	bne.n	80026a8 <RCC_Delay+0x1c>
}
 80026b4:	bf00      	nop
 80026b6:	3714      	adds	r7, #20
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bc80      	pop	{r7}
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	20000018 	.word	0x20000018
 80026c4:	10624dd3 	.word	0x10624dd3

080026c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d101      	bne.n	80026da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e076      	b.n	80027c8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d108      	bne.n	80026f4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80026ea:	d009      	beq.n	8002700 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	61da      	str	r2, [r3, #28]
 80026f2:	e005      	b.n	8002700 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800270c:	b2db      	uxtb	r3, r3
 800270e:	2b00      	cmp	r3, #0
 8002710:	d106      	bne.n	8002720 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f7ff f85a 	bl	80017d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2202      	movs	r2, #2
 8002724:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002736:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002748:	431a      	orrs	r2, r3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002752:	431a      	orrs	r2, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	691b      	ldr	r3, [r3, #16]
 8002758:	f003 0302 	and.w	r3, r3, #2
 800275c:	431a      	orrs	r2, r3
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	695b      	ldr	r3, [r3, #20]
 8002762:	f003 0301 	and.w	r3, r3, #1
 8002766:	431a      	orrs	r2, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	699b      	ldr	r3, [r3, #24]
 800276c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002770:	431a      	orrs	r2, r3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	69db      	ldr	r3, [r3, #28]
 8002776:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800277a:	431a      	orrs	r2, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6a1b      	ldr	r3, [r3, #32]
 8002780:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002784:	ea42 0103 	orr.w	r1, r2, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800278c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	430a      	orrs	r2, r1
 8002796:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	699b      	ldr	r3, [r3, #24]
 800279c:	0c1a      	lsrs	r2, r3, #16
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f002 0204 	and.w	r2, r2, #4
 80027a6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	69da      	ldr	r2, [r3, #28]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027b6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2201      	movs	r2, #1
 80027c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80027c6:	2300      	movs	r3, #0
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3708      	adds	r7, #8
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b088      	sub	sp, #32
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	60f8      	str	r0, [r7, #12]
 80027d8:	60b9      	str	r1, [r7, #8]
 80027da:	603b      	str	r3, [r7, #0]
 80027dc:	4613      	mov	r3, r2
 80027de:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80027e0:	2300      	movs	r3, #0
 80027e2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d101      	bne.n	80027f2 <HAL_SPI_Transmit+0x22>
 80027ee:	2302      	movs	r3, #2
 80027f0:	e126      	b.n	8002a40 <HAL_SPI_Transmit+0x270>
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2201      	movs	r2, #1
 80027f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80027fa:	f7ff f8e1 	bl	80019c0 <HAL_GetTick>
 80027fe:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002800:	88fb      	ldrh	r3, [r7, #6]
 8002802:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800280a:	b2db      	uxtb	r3, r3
 800280c:	2b01      	cmp	r3, #1
 800280e:	d002      	beq.n	8002816 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002810:	2302      	movs	r3, #2
 8002812:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002814:	e10b      	b.n	8002a2e <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d002      	beq.n	8002822 <HAL_SPI_Transmit+0x52>
 800281c:	88fb      	ldrh	r3, [r7, #6]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d102      	bne.n	8002828 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002826:	e102      	b.n	8002a2e <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2203      	movs	r2, #3
 800282c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2200      	movs	r2, #0
 8002834:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	68ba      	ldr	r2, [r7, #8]
 800283a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	88fa      	ldrh	r2, [r7, #6]
 8002840:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	88fa      	ldrh	r2, [r7, #6]
 8002846:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2200      	movs	r2, #0
 800284c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2200      	movs	r2, #0
 8002852:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2200      	movs	r2, #0
 8002858:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2200      	movs	r2, #0
 800285e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2200      	movs	r2, #0
 8002864:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800286e:	d10f      	bne.n	8002890 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800287e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800288e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800289a:	2b40      	cmp	r3, #64	; 0x40
 800289c:	d007      	beq.n	80028ae <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028ac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028b6:	d14b      	bne.n	8002950 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d002      	beq.n	80028c6 <HAL_SPI_Transmit+0xf6>
 80028c0:	8afb      	ldrh	r3, [r7, #22]
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d13e      	bne.n	8002944 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ca:	881a      	ldrh	r2, [r3, #0]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d6:	1c9a      	adds	r2, r3, #2
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	3b01      	subs	r3, #1
 80028e4:	b29a      	uxth	r2, r3
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80028ea:	e02b      	b.n	8002944 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	f003 0302 	and.w	r3, r3, #2
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d112      	bne.n	8002920 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fe:	881a      	ldrh	r2, [r3, #0]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290a:	1c9a      	adds	r2, r3, #2
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002914:	b29b      	uxth	r3, r3
 8002916:	3b01      	subs	r3, #1
 8002918:	b29a      	uxth	r2, r3
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	86da      	strh	r2, [r3, #54]	; 0x36
 800291e:	e011      	b.n	8002944 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002920:	f7ff f84e 	bl	80019c0 <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	683a      	ldr	r2, [r7, #0]
 800292c:	429a      	cmp	r2, r3
 800292e:	d803      	bhi.n	8002938 <HAL_SPI_Transmit+0x168>
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002936:	d102      	bne.n	800293e <HAL_SPI_Transmit+0x16e>
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d102      	bne.n	8002944 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002942:	e074      	b.n	8002a2e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002948:	b29b      	uxth	r3, r3
 800294a:	2b00      	cmp	r3, #0
 800294c:	d1ce      	bne.n	80028ec <HAL_SPI_Transmit+0x11c>
 800294e:	e04c      	b.n	80029ea <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d002      	beq.n	800295e <HAL_SPI_Transmit+0x18e>
 8002958:	8afb      	ldrh	r3, [r7, #22]
 800295a:	2b01      	cmp	r3, #1
 800295c:	d140      	bne.n	80029e0 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	330c      	adds	r3, #12
 8002968:	7812      	ldrb	r2, [r2, #0]
 800296a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002970:	1c5a      	adds	r2, r3, #1
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800297a:	b29b      	uxth	r3, r3
 800297c:	3b01      	subs	r3, #1
 800297e:	b29a      	uxth	r2, r3
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002984:	e02c      	b.n	80029e0 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	f003 0302 	and.w	r3, r3, #2
 8002990:	2b02      	cmp	r3, #2
 8002992:	d113      	bne.n	80029bc <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	330c      	adds	r3, #12
 800299e:	7812      	ldrb	r2, [r2, #0]
 80029a0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a6:	1c5a      	adds	r2, r3, #1
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	3b01      	subs	r3, #1
 80029b4:	b29a      	uxth	r2, r3
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	86da      	strh	r2, [r3, #54]	; 0x36
 80029ba:	e011      	b.n	80029e0 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80029bc:	f7ff f800 	bl	80019c0 <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	69bb      	ldr	r3, [r7, #24]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	683a      	ldr	r2, [r7, #0]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d803      	bhi.n	80029d4 <HAL_SPI_Transmit+0x204>
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029d2:	d102      	bne.n	80029da <HAL_SPI_Transmit+0x20a>
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d102      	bne.n	80029e0 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80029de:	e026      	b.n	8002a2e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d1cd      	bne.n	8002986 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80029ea:	69ba      	ldr	r2, [r7, #24]
 80029ec:	6839      	ldr	r1, [r7, #0]
 80029ee:	68f8      	ldr	r0, [r7, #12]
 80029f0:	f000 f8b2 	bl	8002b58 <SPI_EndRxTxTransaction>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d002      	beq.n	8002a00 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2220      	movs	r2, #32
 80029fe:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d10a      	bne.n	8002a1e <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002a08:	2300      	movs	r3, #0
 8002a0a:	613b      	str	r3, [r7, #16]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	613b      	str	r3, [r7, #16]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	613b      	str	r3, [r7, #16]
 8002a1c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d002      	beq.n	8002a2c <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	77fb      	strb	r3, [r7, #31]
 8002a2a:	e000      	b.n	8002a2e <HAL_SPI_Transmit+0x25e>
  }

error:
 8002a2c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2201      	movs	r2, #1
 8002a32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002a3e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3720      	adds	r7, #32
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b088      	sub	sp, #32
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	60b9      	str	r1, [r7, #8]
 8002a52:	603b      	str	r3, [r7, #0]
 8002a54:	4613      	mov	r3, r2
 8002a56:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002a58:	f7fe ffb2 	bl	80019c0 <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a60:	1a9b      	subs	r3, r3, r2
 8002a62:	683a      	ldr	r2, [r7, #0]
 8002a64:	4413      	add	r3, r2
 8002a66:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002a68:	f7fe ffaa 	bl	80019c0 <HAL_GetTick>
 8002a6c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002a6e:	4b39      	ldr	r3, [pc, #228]	; (8002b54 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	015b      	lsls	r3, r3, #5
 8002a74:	0d1b      	lsrs	r3, r3, #20
 8002a76:	69fa      	ldr	r2, [r7, #28]
 8002a78:	fb02 f303 	mul.w	r3, r2, r3
 8002a7c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a7e:	e054      	b.n	8002b2a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a86:	d050      	beq.n	8002b2a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002a88:	f7fe ff9a 	bl	80019c0 <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	69bb      	ldr	r3, [r7, #24]
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	69fa      	ldr	r2, [r7, #28]
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d902      	bls.n	8002a9e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d13d      	bne.n	8002b1a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	685a      	ldr	r2, [r3, #4]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002aac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ab6:	d111      	bne.n	8002adc <SPI_WaitFlagStateUntilTimeout+0x94>
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ac0:	d004      	beq.n	8002acc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002aca:	d107      	bne.n	8002adc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ada:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ae4:	d10f      	bne.n	8002b06 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002af4:	601a      	str	r2, [r3, #0]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b04:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2201      	movs	r2, #1
 8002b0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2200      	movs	r2, #0
 8002b12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e017      	b.n	8002b4a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d101      	bne.n	8002b24 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002b20:	2300      	movs	r3, #0
 8002b22:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	3b01      	subs	r3, #1
 8002b28:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	689a      	ldr	r2, [r3, #8]
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	4013      	ands	r3, r2
 8002b34:	68ba      	ldr	r2, [r7, #8]
 8002b36:	429a      	cmp	r2, r3
 8002b38:	bf0c      	ite	eq
 8002b3a:	2301      	moveq	r3, #1
 8002b3c:	2300      	movne	r3, #0
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	461a      	mov	r2, r3
 8002b42:	79fb      	ldrb	r3, [r7, #7]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d19b      	bne.n	8002a80 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002b48:	2300      	movs	r3, #0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3720      	adds	r7, #32
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	20000018 	.word	0x20000018

08002b58 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b086      	sub	sp, #24
 8002b5c:	af02      	add	r7, sp, #8
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	60b9      	str	r1, [r7, #8]
 8002b62:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	9300      	str	r3, [sp, #0]
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	2180      	movs	r1, #128	; 0x80
 8002b6e:	68f8      	ldr	r0, [r7, #12]
 8002b70:	f7ff ff6a 	bl	8002a48 <SPI_WaitFlagStateUntilTimeout>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d007      	beq.n	8002b8a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b7e:	f043 0220 	orr.w	r2, r3, #32
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e000      	b.n	8002b8c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002b8a:	2300      	movs	r3, #0
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3710      	adds	r7, #16
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <__libc_init_array>:
 8002b94:	b570      	push	{r4, r5, r6, lr}
 8002b96:	2500      	movs	r5, #0
 8002b98:	4e0c      	ldr	r6, [pc, #48]	; (8002bcc <__libc_init_array+0x38>)
 8002b9a:	4c0d      	ldr	r4, [pc, #52]	; (8002bd0 <__libc_init_array+0x3c>)
 8002b9c:	1ba4      	subs	r4, r4, r6
 8002b9e:	10a4      	asrs	r4, r4, #2
 8002ba0:	42a5      	cmp	r5, r4
 8002ba2:	d109      	bne.n	8002bb8 <__libc_init_array+0x24>
 8002ba4:	f000 f822 	bl	8002bec <_init>
 8002ba8:	2500      	movs	r5, #0
 8002baa:	4e0a      	ldr	r6, [pc, #40]	; (8002bd4 <__libc_init_array+0x40>)
 8002bac:	4c0a      	ldr	r4, [pc, #40]	; (8002bd8 <__libc_init_array+0x44>)
 8002bae:	1ba4      	subs	r4, r4, r6
 8002bb0:	10a4      	asrs	r4, r4, #2
 8002bb2:	42a5      	cmp	r5, r4
 8002bb4:	d105      	bne.n	8002bc2 <__libc_init_array+0x2e>
 8002bb6:	bd70      	pop	{r4, r5, r6, pc}
 8002bb8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002bbc:	4798      	blx	r3
 8002bbe:	3501      	adds	r5, #1
 8002bc0:	e7ee      	b.n	8002ba0 <__libc_init_array+0xc>
 8002bc2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002bc6:	4798      	blx	r3
 8002bc8:	3501      	adds	r5, #1
 8002bca:	e7f2      	b.n	8002bb2 <__libc_init_array+0x1e>
 8002bcc:	0800d520 	.word	0x0800d520
 8002bd0:	0800d520 	.word	0x0800d520
 8002bd4:	0800d520 	.word	0x0800d520
 8002bd8:	0800d524 	.word	0x0800d524

08002bdc <memset>:
 8002bdc:	4603      	mov	r3, r0
 8002bde:	4402      	add	r2, r0
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d100      	bne.n	8002be6 <memset+0xa>
 8002be4:	4770      	bx	lr
 8002be6:	f803 1b01 	strb.w	r1, [r3], #1
 8002bea:	e7f9      	b.n	8002be0 <memset+0x4>

08002bec <_init>:
 8002bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bee:	bf00      	nop
 8002bf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bf2:	bc08      	pop	{r3}
 8002bf4:	469e      	mov	lr, r3
 8002bf6:	4770      	bx	lr

08002bf8 <_fini>:
 8002bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bfa:	bf00      	nop
 8002bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bfe:	bc08      	pop	{r3}
 8002c00:	469e      	mov	lr, r3
 8002c02:	4770      	bx	lr
